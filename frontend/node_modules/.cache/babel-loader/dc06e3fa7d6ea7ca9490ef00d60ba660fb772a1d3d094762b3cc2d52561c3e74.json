{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context for the cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  // Load cart items from localStorage on initial load\n  const loadCartFromLocalStorage = () => {\n    const savedCartItems = JSON.parse(localStorage.getItem('cartItems'));\n    return savedCartItems ? savedCartItems : [];\n  };\n\n  // State to hold cart items, initialized from localStorage\n  const [cartItems, setCartItems] = useState(loadCartFromLocalStorage);\n\n  // Save cart items to localStorage whenever cartItems changes\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Function to get the dispensary name of the vendor from the cart\n  const getDispensaryName = () => {\n    return cartItems.length > 0 ? cartItems[0].vendorName : null;\n  };\n\n  // Function to check if a product can be added to the cart\n  const canAddToCart = newProduct => {\n    if (cartItems.length === 0) {\n      return true; // If the cart is empty, any product can be added\n    }\n    const existingVendor = cartItems[0].vendorId;\n    return existingVendor === newProduct.vendorId;\n  };\n  const addToCart = product => {\n    console.log(\"Attempting to add product to cart:\", product); // Debug: Product details\n    console.log(\"Current cart items before adding:\", cartItems); // Debug: Cart state before update\n\n    if (canAddToCart(product)) {\n      setCartItems(prevItems => {\n        const existingItem = prevItems.find(item => item._id === product._id && item.vendorId === product.vendorId);\n        if (existingItem) {\n          console.log(\"Product already in cart, incrementing quantity:\", existingItem); // Debug: Existing product match\n          return prevItems.map(item => item._id === product._id && item.vendorId === product.vendorId ? {\n            ...item,\n            quantity: item.quantity + 1\n          } : item);\n        } else {\n          console.log(\"Product not in cart, adding new product:\", product); // Debug: Adding new product\n          return [...prevItems, {\n            ...product,\n            quantity: 1,\n            vendorName: product.vendorName,\n            logoUrl: product.logoUrl,\n            vendorId: product.vendorId\n          }];\n        }\n      });\n    } else {\n      var _cartItems$, _cartItems$2;\n      console.warn(`Cannot add product from different vendor (${product.vendorName}). Current vendor: ${(_cartItems$ = cartItems[0]) === null || _cartItems$ === void 0 ? void 0 : _cartItems$.vendorName}`); // Debug: Different vendor warning\n      alert(`You can only add products from the same vendor (${(_cartItems$2 = cartItems[0]) === null || _cartItems$2 === void 0 ? void 0 : _cartItems$2.vendorName}). Please clear your cart to add items from a different vendor.`);\n    }\n    console.log(\"Cart items after attempting to add product:\", cartItems); // Debug: Cart state after update\n  };\n\n  // Remove product from the cart\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item._id !== productId));\n  };\n\n  // Increment quantity of a specific item in the cart\n  const incrementItem = productId => {\n    setCartItems(prevItems => prevItems.map(item => item._id === productId ? {\n      ...item,\n      quantity: item.quantity + 1\n    } : item));\n  };\n\n  // Decrement quantity of a specific item in the cart\n  const decrementItem = productId => {\n    setCartItems(prevItems => prevItems.map(item => item._id === productId && item.quantity > 1 ? {\n      ...item,\n      quantity: item.quantity - 1\n    } : item));\n  };\n\n  // Update quantity of a specific item in the cart manually\n  const updateItemQuantity = (productId, newQuantity) => {\n    setCartItems(prevItems => prevItems.map(item => item.productId === productId ? {\n      ...item,\n      quantity: newQuantity\n    } : item));\n  };\n\n  // Clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((acc, item) => {\n      const itemPrice = item.salePrice || item.price || 0; // Fallback to 0 if undefined\n      return acc + itemPrice * (item.quantity || 1); // Fallback quantity to 1\n    }, 0);\n  };\n\n  // Get the total number of items in the cart (quantity, not unique items)\n  const getItemCount = () => {\n    return cartItems.reduce((acc, item) => acc + item.quantity, 0);\n  };\n\n  // Provide cart data and functions to the rest of the app\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    incrementItem,\n    decrementItem,\n    updateItemQuantity,\n    clearCart,\n    calculateTotal,\n    getItemCount,\n    getDispensaryName\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"xsbshZK9GGyuHrOSyb/Hz3NP2aY=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","loadCartFromLocalStorage","savedCartItems","JSON","parse","localStorage","getItem","cartItems","setCartItems","setItem","stringify","getDispensaryName","length","vendorName","canAddToCart","newProduct","existingVendor","vendorId","addToCart","product","console","log","prevItems","existingItem","find","item","_id","map","quantity","logoUrl","_cartItems$","_cartItems$2","warn","alert","removeFromCart","productId","filter","incrementItem","decrementItem","updateItemQuantity","newQuantity","clearCart","calculateTotal","reduce","acc","itemPrice","salePrice","price","getItemCount","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context for the cart\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n\n  // Load cart items from localStorage on initial load\n  const loadCartFromLocalStorage = () => {\n    const savedCartItems = JSON.parse(localStorage.getItem('cartItems'));\n    return savedCartItems ? savedCartItems : [];\n  };\n\n  // State to hold cart items, initialized from localStorage\n  const [cartItems, setCartItems] = useState(loadCartFromLocalStorage);\n\n  // Save cart items to localStorage whenever cartItems changes\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Function to get the dispensary name of the vendor from the cart\n  const getDispensaryName = () => {\n    return cartItems.length > 0 ? cartItems[0].vendorName : null;\n  };\n\n  // Function to check if a product can be added to the cart\n  const canAddToCart = (newProduct) => {\n    if (cartItems.length === 0) {\n      return true; // If the cart is empty, any product can be added\n    }\n    const existingVendor = cartItems[0].vendorId;\n    return existingVendor === newProduct.vendorId;\n  };\n\n  const addToCart = (product) => {\n    console.log(\"Attempting to add product to cart:\", product); // Debug: Product details\n    console.log(\"Current cart items before adding:\", cartItems); // Debug: Cart state before update\n  \n    if (canAddToCart(product)) {\n      setCartItems((prevItems) => {\n        const existingItem = prevItems.find(\n          (item) => item._id === product._id && item.vendorId === product.vendorId\n        );\n  \n        if (existingItem) {\n          console.log(\"Product already in cart, incrementing quantity:\", existingItem); // Debug: Existing product match\n          return prevItems.map((item) =>\n            item._id === product._id && item.vendorId === product.vendorId\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          );\n        } else {\n          console.log(\"Product not in cart, adding new product:\", product); // Debug: Adding new product\n          return [\n            ...prevItems,\n            {\n              ...product,\n              quantity: 1,\n              vendorName: product.vendorName,\n              logoUrl: product.logoUrl,\n              vendorId: product.vendorId,\n            },\n          ];\n        }\n      });\n    } else {\n      console.warn(\n        `Cannot add product from different vendor (${product.vendorName}). Current vendor: ${cartItems[0]?.vendorName}`\n      ); // Debug: Different vendor warning\n      alert(\n        `You can only add products from the same vendor (${cartItems[0]?.vendorName}). Please clear your cart to add items from a different vendor.`\n      );\n    }\n  \n    console.log(\"Cart items after attempting to add product:\", cartItems); // Debug: Cart state after update\n  };\n  \n  \n  \n  \n\n  // Remove product from the cart\n  const removeFromCart = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.filter(item => item._id !== productId)\n    );\n  };\n\n  // Increment quantity of a specific item in the cart\n  const incrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item._id === productId ? { ...item, quantity: item.quantity + 1 } : item\n      )\n    );\n  };\n\n  // Decrement quantity of a specific item in the cart\n  const decrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item._id === productId && item.quantity > 1\n          ? { ...item, quantity: item.quantity - 1 }\n          : item\n      )\n    );\n  };\n\n  // Update quantity of a specific item in the cart manually\n  const updateItemQuantity = (productId, newQuantity) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item.productId === productId ? { ...item, quantity: newQuantity } : item\n      )\n    );\n  };\n\n  // Clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((acc, item) => {\n      const itemPrice = item.salePrice || item.price || 0; // Fallback to 0 if undefined\n      return acc + itemPrice * (item.quantity || 1); // Fallback quantity to 1\n    }, 0);\n  };\n  \n\n  // Get the total number of items in the cart (quantity, not unique items)\n  const getItemCount = () => {\n    return cartItems.reduce((acc, item) => acc + item.quantity, 0);\n  };\n\n  // Provide cart data and functions to the rest of the app\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    incrementItem,\n    decrementItem,\n    updateItemQuantity,\n    clearCart,\n    calculateTotal,\n    getItemCount,\n    getDispensaryName,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}