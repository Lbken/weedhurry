{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';// Create a Context for the cart\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const CartContext=/*#__PURE__*/createContext();export const CartProvider=_ref=>{let{children}=_ref;// Load cart items from localStorage on initial load\nconst loadCartFromLocalStorage=()=>{const savedCartItems=JSON.parse(localStorage.getItem('cartItems'));return savedCartItems?savedCartItems:[];};// State to hold cart items, initialized from localStorage\nconst[cartItems,setCartItems]=useState(loadCartFromLocalStorage);// Save cart items to localStorage whenever cartItems changes\nuseEffect(()=>{localStorage.setItem('cartItems',JSON.stringify(cartItems));},[cartItems]);// Function to get the dispensary name of the vendor from the cart\nconst getDispensaryName=()=>{return cartItems.length>0?cartItems[0].vendorName:null;};// Function to check if a product can be added to the cart\nconst canAddToCart=newProduct=>{if(cartItems.length===0){return true;// If the cart is empty, any product can be added\n}const existingVendor=cartItems[0].vendorId;return existingVendor===newProduct.vendorId;};const addToCart=product=>{console.log(\"Attempting to add product to cart:\",product);// Debug: Product details\nconsole.log(\"Current cart items before adding:\",cartItems);// Debug: Cart state before update\nif(canAddToCart(product)){setCartItems(prevItems=>{const uniqueKey=`${product._id}-${product.strain}-${product.amount}`;const existingItem=prevItems.find(item=>`${item._id}-${item.strain}-${item.amount}`===uniqueKey);if(existingItem){console.log(\"Product already in cart, incrementing quantity:\",existingItem);// Debug: Existing product match\nreturn prevItems.map(item=>`${item._id}-${item.strain}-${item.amount}`===uniqueKey?{...item,quantity:item.quantity+1}:item);}else{console.log(\"Product not in cart, adding new product:\",product);// Debug: Adding new product\nreturn[...prevItems,{...product,quantity:1,productId:product._id,vendorName:product.vendorName,logoUrl:product.logoUrl,vendorId:product.vendorId,orderType:product.orderType}];}});}else{var _cartItems$,_cartItems$2;console.warn(`Cannot add product from different vendor (${product.vendorName}). Current vendor: ${(_cartItems$=cartItems[0])===null||_cartItems$===void 0?void 0:_cartItems$.vendorName}`);// Debug: Different vendor warning\nalert(`You can only add products from the same vendor (${(_cartItems$2=cartItems[0])===null||_cartItems$2===void 0?void 0:_cartItems$2.vendorName}). Please clear your cart to add items from a different vendor.`);}console.log(\"Cart items after attempting to add product:\",cartItems);// Debug: Cart state after update\n};// Remove product from the cart\nconst removeFromCart=productId=>{setCartItems(prevItems=>prevItems.filter(item=>item._id!==productId));};// Increment quantity of a specific item in the cart\nconst incrementItem=productId=>{setCartItems(prevItems=>prevItems.map(item=>item._id===productId?{...item,quantity:item.quantity+1}:item));};// Decrement quantity of a specific item in the cart\nconst decrementItem=productId=>{setCartItems(prevItems=>prevItems.map(item=>item._id===productId&&item.quantity>1?{...item,quantity:item.quantity-1}:item));};// Update quantity of a specific item in the cart manually\nconst updateItemQuantity=(productId,newQuantity)=>{setCartItems(prevItems=>prevItems.map(item=>item.productId===productId?{...item,quantity:newQuantity}:item));};// Clear all items from the cart\nconst clearCart=()=>{setCartItems([]);};// Calculate total price of items in the cart\nconst calculateTotal=()=>{return cartItems.reduce((acc,item)=>{const itemPrice=item.salePrice||item.price||0;// Fallback to 0 if undefined\nreturn acc+itemPrice*(item.quantity||1);// Fallback quantity to 1\n},0);};// Get the total number of items in the cart (quantity, not unique items)\nconst getItemCount=()=>{return cartItems.reduce((acc,item)=>acc+item.quantity,0);};// Provide cart data and functions to the rest of the app\nconst value={cartItems,addToCart,removeFromCart,incrementItem,decrementItem,updateItemQuantity,clearCart,calculateTotal,getItemCount,getDispensaryName};return/*#__PURE__*/_jsx(CartContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","jsx","_jsx","CartContext","CartProvider","_ref","children","loadCartFromLocalStorage","savedCartItems","JSON","parse","localStorage","getItem","cartItems","setCartItems","setItem","stringify","getDispensaryName","length","vendorName","canAddToCart","newProduct","existingVendor","vendorId","addToCart","product","console","log","prevItems","uniqueKey","_id","strain","amount","existingItem","find","item","map","quantity","productId","logoUrl","orderType","_cartItems$","_cartItems$2","warn","alert","removeFromCart","filter","incrementItem","decrementItem","updateItemQuantity","newQuantity","clearCart","calculateTotal","reduce","acc","itemPrice","salePrice","price","getItemCount","value","Provider"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context for the cart\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n\n  // Load cart items from localStorage on initial load\n  const loadCartFromLocalStorage = () => {\n    const savedCartItems = JSON.parse(localStorage.getItem('cartItems'));\n    return savedCartItems ? savedCartItems : [];\n  };\n\n  // State to hold cart items, initialized from localStorage\n  const [cartItems, setCartItems] = useState(loadCartFromLocalStorage);\n\n  // Save cart items to localStorage whenever cartItems changes\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Function to get the dispensary name of the vendor from the cart\n  const getDispensaryName = () => {\n    return cartItems.length > 0 ? cartItems[0].vendorName : null;\n  };\n\n  // Function to check if a product can be added to the cart\n  const canAddToCart = (newProduct) => {\n    if (cartItems.length === 0) {\n      return true; // If the cart is empty, any product can be added\n    }\n    const existingVendor = cartItems[0].vendorId;\n    return existingVendor === newProduct.vendorId;\n  };\n\n  const addToCart = (product) => {\n    console.log(\"Attempting to add product to cart:\", product); // Debug: Product details\n    console.log(\"Current cart items before adding:\", cartItems); // Debug: Cart state before update\n  \n    if (canAddToCart(product)) {\n      setCartItems((prevItems) => {\n        const uniqueKey = `${product._id}-${product.strain}-${product.amount}`;\n        const existingItem = prevItems.find(\n          (item) => `${item._id}-${item.strain}-${item.amount}` === uniqueKey\n        );\n  \n        if (existingItem) {\n          console.log(\"Product already in cart, incrementing quantity:\", existingItem); // Debug: Existing product match\n          return prevItems.map((item) =>\n            `${item._id}-${item.strain}-${item.amount}` === uniqueKey\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          );\n        } else {\n          console.log(\"Product not in cart, adding new product:\", product); // Debug: Adding new product\n          return [\n            ...prevItems,\n            {\n              ...product,\n              quantity: 1,\n              productId: product._id,\n              vendorName: product.vendorName,\n              logoUrl: product.logoUrl,\n              vendorId: product.vendorId,\n              orderType: product.orderType,\n            },\n          ];\n        }\n      });\n    } else {\n      console.warn(\n        `Cannot add product from different vendor (${product.vendorName}). Current vendor: ${cartItems[0]?.vendorName}`\n      ); // Debug: Different vendor warning\n      alert(\n        `You can only add products from the same vendor (${cartItems[0]?.vendorName}). Please clear your cart to add items from a different vendor.`\n      );\n    }\n  \n    console.log(\"Cart items after attempting to add product:\", cartItems); // Debug: Cart state after update\n  };\n  \n  \n  \n  \n  \n\n  // Remove product from the cart\n  const removeFromCart = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.filter(item => item._id !== productId)\n    );\n  };\n\n  // Increment quantity of a specific item in the cart\n  const incrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item._id === productId ? { ...item, quantity: item.quantity + 1 } : item\n      )\n    );\n  };\n\n  // Decrement quantity of a specific item in the cart\n  const decrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item._id === productId && item.quantity > 1\n          ? { ...item, quantity: item.quantity - 1 }\n          : item\n      )\n    );\n  };\n\n  // Update quantity of a specific item in the cart manually\n  const updateItemQuantity = (productId, newQuantity) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item.productId === productId ? { ...item, quantity: newQuantity } : item\n      )\n    );\n  };\n\n  // Clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((acc, item) => {\n      const itemPrice = item.salePrice || item.price || 0; // Fallback to 0 if undefined\n      return acc + itemPrice * (item.quantity || 1); // Fallback quantity to 1\n    }, 0);\n  };\n  \n\n  // Get the total number of items in the cart (quantity, not unique items)\n  const getItemCount = () => {\n    return cartItems.reduce((acc, item) => acc + item.quantity, 0);\n  };\n\n  // Provide cart data and functions to the rest of the app\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    incrementItem,\n    decrementItem,\n    updateItemQuantity,\n    clearCart,\n    calculateTotal,\n    getItemCount,\n    getDispensaryName,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}