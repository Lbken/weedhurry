{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/AddressInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Form, Button, InputGroup } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressInput = ({\n  onLocationUpdate\n}) => {\n  _s();\n  const [address, setAddress] = useState('');\n  const [error, setError] = useState(null);\n  const handleGeocode = async () => {\n    try {\n      // Example: Replace with your geocoding API\n      const response = await axios.get('/api/geocode', {\n        params: {\n          address\n        }\n      });\n      const {\n        lat,\n        lng\n      } = response.data;\n      onLocationUpdate({\n        lat,\n        lng\n      });\n    } catch (err) {\n      setError('Unable to geocode the address. Please try again.');\n    }\n  };\n  const handleUseCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      onLocationUpdate({\n        lat: latitude,\n        lng: longitude\n      });\n    }, err => {\n      setError('Unable to get current location. Please allow location access.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"address-input mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Enter your address\",\n        value: address,\n        onChange: e => setAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleGeocode,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outline-secondary\",\n      className: \"mt-2\",\n      onClick: handleUseCurrentLocation,\n      children: \"Use Current Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger mt-2\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AddressInput, \"YHBavL0lscW2MSug9rfrdpbuEp8=\");\n_c = AddressInput;\nexport default AddressInput;\nvar _c;\n$RefreshReg$(_c, \"AddressInput\");","map":{"version":3,"names":["React","useState","axios","Form","Button","InputGroup","jsxDEV","_jsxDEV","AddressInput","onLocationUpdate","_s","address","setAddress","error","setError","handleGeocode","response","get","params","lat","lng","data","err","handleUseCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","className","children","Control","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/AddressInput.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Form, Button, InputGroup } from 'react-bootstrap';\n\nconst AddressInput = ({ onLocationUpdate }) => {\n  const [address, setAddress] = useState('');\n  const [error, setError] = useState(null);\n\n  const handleGeocode = async () => {\n    try {\n      // Example: Replace with your geocoding API\n      const response = await axios.get('/api/geocode', { params: { address } });\n      const { lat, lng } = response.data;\n      onLocationUpdate({ lat, lng });\n    } catch (err) {\n      setError('Unable to geocode the address. Please try again.');\n    }\n  };\n\n  const handleUseCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        onLocationUpdate({ lat: latitude, lng: longitude });\n      },\n      (err) => {\n        setError('Unable to get current location. Please allow location access.');\n      }\n    );\n  };\n\n  return (\n    <div className=\"address-input mb-4\">\n      <InputGroup>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter your address\"\n          value={address}\n          onChange={(e) => setAddress(e.target.value)}\n        />\n        <Button variant=\"primary\" onClick={handleGeocode}>\n          Submit\n        </Button>\n      </InputGroup>\n      <Button\n        variant=\"outline-secondary\"\n        className=\"mt-2\"\n        onClick={handleUseCurrentLocation}\n      >\n        Use Current Location\n      </Button>\n      {error && <p className=\"text-danger mt-2\">{error}</p>}\n    </div>\n  );\n};\n\nexport default AddressInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}