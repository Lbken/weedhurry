{"ast":null,"code":"// src/utils/googleMapsLoader.js\nlet loadingPromise=null;const LIBRARIES=['places','geometry'];// Add any required libraries here\nexport const loadGoogleMapsScript=()=>{if(loadingPromise){return loadingPromise;}loadingPromise=new Promise((resolve,reject)=>{try{var _window$google;// If script is already loaded, resolve immediately\nif((_window$google=window.google)!==null&&_window$google!==void 0&&_window$google.maps){console.log('Google Maps already loaded');resolve(window.google.maps);return;}// Create callback function\nconst callbackName='googleMapsCallback';window[callbackName]=()=>{console.log('Google Maps loaded successfully');resolve(window.google.maps);delete window[callbackName];};// Create script element\nconst script=document.createElement('script');const libraries=LIBRARIES.join(',');script.src=`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=${libraries}&callback=${callbackName}`;script.async=true;script.defer=true;// Setup error handler\nscript.onerror=()=>{console.error('Failed to load Google Maps SDK');loadingPromise=null;// Reset promise so it can be tried again\nreject(new Error('Failed to load Google Maps SDK'));};// Add script to document\ndocument.head.appendChild(script);console.log('Google Maps script added to DOM');}catch(error){console.error('Error in Google Maps loader:',error);loadingPromise=null;reject(error);}});return loadingPromise;};// Add a helper to check if maps is loaded\nexport const isGoogleMapsLoaded=()=>{var _window$google2;return!!((_window$google2=window.google)!==null&&_window$google2!==void 0&&_window$google2.maps);};// Add a helper to get geocoder instance\nexport const getGeocoder=async()=>{const maps=await loadGoogleMapsScript();return new maps.Geocoder();};// Helper for geocoding addresses\nexport const geocodeAddress=async address=>{try{const geocoder=await getGeocoder();const response=await new Promise((resolve,reject)=>{geocoder.geocode({address},(results,status)=>{if(status==='OK'){resolve(results);}else{reject(new Error(`Geocoding failed: ${status}`));}});});if(response[0]){const{lat,lng}=response[0].geometry.location;return{lat:lat(),lng:lng(),formatted_address:response[0].formatted_address};}throw new Error('No results found');}catch(error){console.error('Geocoding error:',error);throw error;}};","map":{"version":3,"names":["loadingPromise","LIBRARIES","loadGoogleMapsScript","Promise","resolve","reject","_window$google","window","google","maps","console","log","callbackName","script","document","createElement","libraries","join","src","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","async","defer","onerror","error","Error","head","appendChild","isGoogleMapsLoaded","_window$google2","getGeocoder","Geocoder","geocodeAddress","address","geocoder","response","geocode","results","status","lat","lng","geometry","location","formatted_address"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/utils/googleMapsLoader.js"],"sourcesContent":["// src/utils/googleMapsLoader.js\n\nlet loadingPromise = null;\nconst LIBRARIES = ['places', 'geometry']; // Add any required libraries here\n\nexport const loadGoogleMapsScript = () => {\n  if (loadingPromise) {\n    return loadingPromise;\n  }\n\n  loadingPromise = new Promise((resolve, reject) => {\n    try {\n      // If script is already loaded, resolve immediately\n      if (window.google?.maps) {\n        console.log('Google Maps already loaded');\n        resolve(window.google.maps);\n        return;\n      }\n\n      // Create callback function\n      const callbackName = 'googleMapsCallback';\n      window[callbackName] = () => {\n        console.log('Google Maps loaded successfully');\n        resolve(window.google.maps);\n        delete window[callbackName];\n      };\n\n      // Create script element\n      const script = document.createElement('script');\n      const libraries = LIBRARIES.join(',');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=${libraries}&callback=${callbackName}`;\n      script.async = true;\n      script.defer = true;\n\n      // Setup error handler\n      script.onerror = () => {\n        console.error('Failed to load Google Maps SDK');\n        loadingPromise = null; // Reset promise so it can be tried again\n        reject(new Error('Failed to load Google Maps SDK'));\n      };\n\n      // Add script to document\n      document.head.appendChild(script);\n      console.log('Google Maps script added to DOM');\n    } catch (error) {\n      console.error('Error in Google Maps loader:', error);\n      loadingPromise = null;\n      reject(error);\n    }\n  });\n\n  return loadingPromise;\n};\n\n// Add a helper to check if maps is loaded\nexport const isGoogleMapsLoaded = () => {\n  return !!window.google?.maps;\n};\n\n// Add a helper to get geocoder instance\nexport const getGeocoder = async () => {\n  const maps = await loadGoogleMapsScript();\n  return new maps.Geocoder();\n};\n\n// Helper for geocoding addresses\nexport const geocodeAddress = async (address) => {\n  try {\n    const geocoder = await getGeocoder();\n    const response = await new Promise((resolve, reject) => {\n      geocoder.geocode({ address }, (results, status) => {\n        if (status === 'OK') {\n          resolve(results);\n        } else {\n          reject(new Error(`Geocoding failed: ${status}`));\n        }\n      });\n    });\n    \n    if (response[0]) {\n      const { lat, lng } = response[0].geometry.location;\n      return {\n        lat: lat(),\n        lng: lng(),\n        formatted_address: response[0].formatted_address\n      };\n    }\n    throw new Error('No results found');\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}