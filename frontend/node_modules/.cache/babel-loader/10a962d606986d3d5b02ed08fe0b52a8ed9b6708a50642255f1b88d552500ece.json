{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context for the cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  // Load cart items from localStorage on initial load\n  const loadCartFromLocalStorage = () => {\n    const savedCartItems = JSON.parse(localStorage.getItem('cartItems'));\n    return savedCartItems ? savedCartItems : [];\n  };\n\n  // State to hold cart items, initialized from localStorage\n  const [cartItems, setCartItems] = useState(loadCartFromLocalStorage);\n\n  // Save cart items to localStorage whenever cartItems changes\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Function to get the dispensary name of the vendor from the cart\n  const getDispensaryName = () => {\n    return cartItems.length > 0 ? cartItems[0].vendorName : null;\n  };\n\n  // Function to check if a product can be added to the cart\n  const canAddToCart = newProduct => {\n    if (cartItems.length === 0) {\n      return true; // If the cart is empty, any product can be added\n    }\n    const existingVendor = cartItems[0].vendorId;\n    return existingVendor === newProduct.vendorId;\n  };\n\n  // Add product to the cart\n  const addToCart = product => {\n    const vendorId = product.vendorId || 'defaultVendorId';\n    if (canAddToCart(product)) {\n      setCartItems(prevItems => {\n        const existingItem = prevItems.find(item => item._id === product._id);\n        if (existingItem) {\n          // Increment quantity if product already exists in the cart\n          return prevItems.map(item => item._id === product._id ? {\n            ...item,\n            quantity: item.quantity + 1\n          } : item);\n        } else {\n          // Add new product to the cart\n          return [...prevItems, {\n            ...product,\n            quantity: 1,\n            vendorName: product.vendorName,\n            // Add vendor name\n            logoUrl: product.logoUrl,\n            // Add vendor logo\n            vendorId: product.vendorId\n          }];\n        }\n      });\n    } else {\n      alert(`You can only add products from the same vendor (${getDispensaryName()}). Please clear your cart to add items from a different vendor.`);\n    }\n  };\n\n  // Remove product from the cart\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item._id !== productId));\n  };\n\n  // Increment quantity of a specific item in the cart\n  const incrementItem = productId => {\n    setCartItems(prevItems => prevItems.map(item => item._id === productId ? {\n      ...item,\n      quantity: item.quantity + 1\n    } : item));\n  };\n\n  // Decrement quantity of a specific item in the cart\n  const decrementItem = productId => {\n    setCartItems(prevItems => prevItems.map(item => item._id === productId && item.quantity > 1 ? {\n      ...item,\n      quantity: item.quantity - 1\n    } : item));\n  };\n\n  // Update quantity of a specific item in the cart manually\n  const updateItemQuantity = (productId, newQuantity) => {\n    setCartItems(prevItems => prevItems.map(item => item.productId === productId ? {\n      ...item,\n      quantity: newQuantity\n    } : item));\n  };\n\n  // Clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((acc, item) => {\n      const itemPrice = item.salePrice || item.price || 0; // Fallback to 0 if undefined\n      return acc + itemPrice * (item.quantity || 1); // Fallback quantity to 1\n    }, 0);\n  };\n\n  // Get the total number of items in the cart (quantity, not unique items)\n  const getItemCount = () => {\n    return cartItems.reduce((acc, item) => acc + item.quantity, 0);\n  };\n\n  // Provide cart data and functions to the rest of the app\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    incrementItem,\n    decrementItem,\n    updateItemQuantity,\n    clearCart,\n    calculateTotal,\n    getItemCount,\n    getDispensaryName\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"xsbshZK9GGyuHrOSyb/Hz3NP2aY=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","loadCartFromLocalStorage","savedCartItems","JSON","parse","localStorage","getItem","cartItems","setCartItems","setItem","stringify","getDispensaryName","length","vendorName","canAddToCart","newProduct","existingVendor","vendorId","addToCart","product","prevItems","existingItem","find","item","_id","map","quantity","logoUrl","alert","removeFromCart","productId","filter","incrementItem","decrementItem","updateItemQuantity","newQuantity","clearCart","calculateTotal","reduce","acc","itemPrice","salePrice","price","getItemCount","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context for the cart\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n\n  // Load cart items from localStorage on initial load\n  const loadCartFromLocalStorage = () => {\n    const savedCartItems = JSON.parse(localStorage.getItem('cartItems'));\n    return savedCartItems ? savedCartItems : [];\n  };\n\n  // State to hold cart items, initialized from localStorage\n  const [cartItems, setCartItems] = useState(loadCartFromLocalStorage);\n\n  // Save cart items to localStorage whenever cartItems changes\n  useEffect(() => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  // Function to get the dispensary name of the vendor from the cart\n  const getDispensaryName = () => {\n    return cartItems.length > 0 ? cartItems[0].vendorName : null;\n  };\n\n  // Function to check if a product can be added to the cart\n  const canAddToCart = (newProduct) => {\n    if (cartItems.length === 0) {\n      return true; // If the cart is empty, any product can be added\n    }\n    const existingVendor = cartItems[0].vendorId;\n    return existingVendor === newProduct.vendorId;\n  };\n\n  // Add product to the cart\n  const addToCart = (product) => {\n    const vendorId = product.vendorId || 'defaultVendorId';\n    if (canAddToCart(product)) {\n      setCartItems((prevItems) => {\n        const existingItem = prevItems.find(item => item._id === product._id);\n        if (existingItem) {\n          // Increment quantity if product already exists in the cart\n          return prevItems.map(item =>\n            item._id === product._id\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          );\n        } else {\n          // Add new product to the cart\n          return [\n            ...prevItems,\n            {\n              ...product,\n              quantity: 1,\n              vendorName: product.vendorName, // Add vendor name\n              logoUrl: product.logoUrl, // Add vendor logo\n              vendorId: product.vendorId,\n            },\n          ];\n        }\n      });\n    } else {\n      alert(\n        `You can only add products from the same vendor (${getDispensaryName()}). Please clear your cart to add items from a different vendor.`\n      );\n    }\n  };\n  \n\n  // Remove product from the cart\n  const removeFromCart = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.filter(item => item._id !== productId)\n    );\n  };\n\n  // Increment quantity of a specific item in the cart\n  const incrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item._id === productId ? { ...item, quantity: item.quantity + 1 } : item\n      )\n    );\n  };\n\n  // Decrement quantity of a specific item in the cart\n  const decrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item._id === productId && item.quantity > 1\n          ? { ...item, quantity: item.quantity - 1 }\n          : item\n      )\n    );\n  };\n\n  // Update quantity of a specific item in the cart manually\n  const updateItemQuantity = (productId, newQuantity) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item.productId === productId ? { ...item, quantity: newQuantity } : item\n      )\n    );\n  };\n\n  // Clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((acc, item) => {\n      const itemPrice = item.salePrice || item.price || 0; // Fallback to 0 if undefined\n      return acc + itemPrice * (item.quantity || 1); // Fallback quantity to 1\n    }, 0);\n  };\n  \n\n  // Get the total number of items in the cart (quantity, not unique items)\n  const getItemCount = () => {\n    return cartItems.reduce((acc, item) => acc + item.quantity, 0);\n  };\n\n  // Provide cart data and functions to the rest of the app\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    incrementItem,\n    decrementItem,\n    updateItemQuantity,\n    clearCart,\n    calculateTotal,\n    getItemCount,\n    getDispensaryName,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}