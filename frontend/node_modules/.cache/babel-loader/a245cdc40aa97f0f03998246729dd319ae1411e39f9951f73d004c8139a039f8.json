{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [auth, setAuth] = useState(null); // User state\n  const [loading, setLoading] = useState(true); // Loading state\n\n  // Function to log in the user\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:4000/api/auth/login', {\n        email,\n        password\n      }, {\n        withCredentials: true // Include cookies with request\n      });\n      setAuth(response.data.vendor); // Update user data from the response\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw new Error('Login failed. Please check your credentials.');\n    }\n  };\n\n  // Function to log out the user\n  const logout = async () => {\n    try {\n      await axios.post('http://localhost:4000/api/auth/logout', {}, {\n        withCredentials: true // Include cookies with request\n      });\n      setAuth(null); // Clear user state\n      window.location.href = '/login'; // Redirect to login page\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  // Function to check authentication status\n  const checkAuthStatus = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/api/auth/validate', {\n        withCredentials: true // Include cookies with request\n      });\n      setAuth(response.data.vendor); // Update user state\n    } catch (error) {\n      console.error('User is not authenticated:', error);\n      setAuth(null);\n    } finally {\n      setLoading(false); // Stop loading after the check\n    }\n  };\n\n  // Automatically check authentication status on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      login,\n      logout,\n      loading\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook for accessing the AuthContext\n_s(AuthProvider, \"1M3j6YOcUIG6FlGAoQ0D+5QxHCI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","auth","setAuth","loading","setLoading","login","email","password","response","post","withCredentials","data","vendor","error","console","Error","logout","window","location","href","checkAuthStatus","get","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [auth, setAuth] = useState(null); // User state\n    const [loading, setLoading] = useState(true); // Loading state\n\n    // Function to log in the user\n    const login = async (email, password) => {\n        try {\n            const response = await axios.post('http://localhost:4000/api/auth/login', { email, password }, {\n                withCredentials: true, // Include cookies with request\n            });\n\n            setAuth(response.data.vendor); // Update user data from the response\n        } catch (error) {\n            console.error('Login failed:', error);\n            throw new Error('Login failed. Please check your credentials.');\n        }\n    };\n\n    // Function to log out the user\n    const logout = async () => {\n        try {\n            await axios.post('http://localhost:4000/api/auth/logout', {}, {\n                withCredentials: true, // Include cookies with request\n            });\n\n            setAuth(null); // Clear user state\n            window.location.href = '/login'; // Redirect to login page\n        } catch (error) {\n            console.error('Logout failed:', error);\n        }\n    };\n\n    // Function to check authentication status\n    const checkAuthStatus = async () => {\n        try {\n            const response = await axios.get('http://localhost:4000/api/auth/validate', {\n                withCredentials: true, // Include cookies with request\n            });\n\n            setAuth(response.data.vendor); // Update user state\n        } catch (error) {\n            console.error('User is not authenticated:', error);\n            setAuth(null);\n        } finally {\n            setLoading(false); // Stop loading after the check\n        }\n    };\n\n    // Automatically check authentication status on mount\n    useEffect(() => {\n        checkAuthStatus();\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{ auth, login, logout, loading }}>\n            {loading ? <div>Loading...</div> : children}\n        </AuthContext.Provider>\n    );\n};\n\n// Custom hook for accessing the AuthContext\nexport const useAuth = () => {\n    return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}