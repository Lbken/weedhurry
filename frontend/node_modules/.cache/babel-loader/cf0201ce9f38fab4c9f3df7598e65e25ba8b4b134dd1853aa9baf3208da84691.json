{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/AddressInput.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressInput = ({\n  onAddressSelect\n}) => {\n  _s();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    const loadGoogleMaps = async () => {\n      if (!window.google) {\n        console.error('Google Maps library is not loaded.');\n        return;\n      }\n      try {\n        // Dynamically import the 'places' library\n        const {\n          Autocomplete\n        } = await google.maps.importLibrary('places');\n        if (inputRef.current) {\n          const autocomplete = new Autocomplete(inputRef.current, {\n            types: ['geocode'],\n            // Restrict suggestions to addresses\n            componentRestrictions: {\n              country: 'us'\n            } // Restrict to US\n          });\n          autocomplete.addListener('place_changed', () => {\n            const place = autocomplete.getPlace();\n            if (place.geometry) {\n              const selectedAddress = {\n                lat: place.geometry.location.lat(),\n                lng: place.geometry.location.lng(),\n                address: place.formatted_address\n              };\n              console.log('Selected Address:', selectedAddress);\n              if (onAddressSelect) {\n                onAddressSelect(selectedAddress); // Pass the selected address to the parent component\n              }\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error loading Google Maps:', error);\n      }\n    };\n\n    // Wait until the Google Maps API is available\n    if (window.google && window.google.maps) {\n      loadGoogleMaps();\n    } else {\n      const intervalId = setInterval(() => {\n        if (window.google && window.google.maps) {\n          clearInterval(intervalId);\n          loadGoogleMaps();\n        }\n      }, 100); // Check every 100ms\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    ref: inputRef,\n    type: \"text\",\n    placeholder: \"Enter your address\",\n    style: {\n      width: '100%',\n      padding: '8px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n};\n_s(AddressInput, \"cBQ6FQ+sf5H+lvNONLKqtm4aeQ8=\");\n_c = AddressInput;\nexport default AddressInput;\nvar _c;\n$RefreshReg$(_c, \"AddressInput\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","AddressInput","onAddressSelect","_s","inputRef","loadGoogleMaps","window","google","console","error","Autocomplete","maps","importLibrary","current","autocomplete","types","componentRestrictions","country","addListener","place","getPlace","geometry","selectedAddress","lat","location","lng","address","formatted_address","log","intervalId","setInterval","clearInterval","ref","type","placeholder","style","width","padding","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/AddressInput.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst AddressInput = ({ onAddressSelect }) => {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    const loadGoogleMaps = async () => {\n      if (!window.google) {\n        console.error('Google Maps library is not loaded.');\n        return;\n      }\n\n      try {\n        // Dynamically import the 'places' library\n        const { Autocomplete } = await google.maps.importLibrary('places');\n\n        if (inputRef.current) {\n          const autocomplete = new Autocomplete(inputRef.current, {\n            types: ['geocode'], // Restrict suggestions to addresses\n            componentRestrictions: { country: 'us' }, // Restrict to US\n          });\n\n          autocomplete.addListener('place_changed', () => {\n            const place = autocomplete.getPlace();\n            if (place.geometry) {\n              const selectedAddress = {\n                lat: place.geometry.location.lat(),\n                lng: place.geometry.location.lng(),\n                address: place.formatted_address,\n              };\n              console.log('Selected Address:', selectedAddress);\n\n              if (onAddressSelect) {\n                onAddressSelect(selectedAddress); // Pass the selected address to the parent component\n              }\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error loading Google Maps:', error);\n      }\n    };\n\n    // Wait until the Google Maps API is available\n    if (window.google && window.google.maps) {\n      loadGoogleMaps();\n    } else {\n      const intervalId = setInterval(() => {\n        if (window.google && window.google.maps) {\n          clearInterval(intervalId);\n          loadGoogleMaps();\n        }\n      }, 100); // Check every 100ms\n    }\n  }, []);\n\n  return <input ref={inputRef} type=\"text\" placeholder=\"Enter your address\" style={{ width: '100%', padding: '8px' }} />;\n};\n\nexport default AddressInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE;QAClBC,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;QACnD;MACF;MAEA,IAAI;QACF;QACA,MAAM;UAAEC;QAAa,CAAC,GAAG,MAAMH,MAAM,CAACI,IAAI,CAACC,aAAa,CAAC,QAAQ,CAAC;QAElE,IAAIR,QAAQ,CAACS,OAAO,EAAE;UACpB,MAAMC,YAAY,GAAG,IAAIJ,YAAY,CAACN,QAAQ,CAACS,OAAO,EAAE;YACtDE,KAAK,EAAE,CAAC,SAAS,CAAC;YAAE;YACpBC,qBAAqB,EAAE;cAAEC,OAAO,EAAE;YAAK,CAAC,CAAE;UAC5C,CAAC,CAAC;UAEFH,YAAY,CAACI,WAAW,CAAC,eAAe,EAAE,MAAM;YAC9C,MAAMC,KAAK,GAAGL,YAAY,CAACM,QAAQ,CAAC,CAAC;YACrC,IAAID,KAAK,CAACE,QAAQ,EAAE;cAClB,MAAMC,eAAe,GAAG;gBACtBC,GAAG,EAAEJ,KAAK,CAACE,QAAQ,CAACG,QAAQ,CAACD,GAAG,CAAC,CAAC;gBAClCE,GAAG,EAAEN,KAAK,CAACE,QAAQ,CAACG,QAAQ,CAACC,GAAG,CAAC,CAAC;gBAClCC,OAAO,EAAEP,KAAK,CAACQ;cACjB,CAAC;cACDnB,OAAO,CAACoB,GAAG,CAAC,mBAAmB,EAAEN,eAAe,CAAC;cAEjD,IAAIpB,eAAe,EAAE;gBACnBA,eAAe,CAACoB,eAAe,CAAC,CAAC,CAAC;cACpC;YACF;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;;IAED;IACA,IAAIH,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACI,IAAI,EAAE;MACvCN,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MACL,MAAMwB,UAAU,GAAGC,WAAW,CAAC,MAAM;QACnC,IAAIxB,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACI,IAAI,EAAE;UACvCoB,aAAa,CAACF,UAAU,CAAC;UACzBxB,cAAc,CAAC,CAAC;QAClB;MACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOL,OAAA;IAAOgC,GAAG,EAAE5B,QAAS;IAAC6B,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,oBAAoB;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAM;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxH,CAAC;AAACtC,EAAA,CAvDIF,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AAyDlB,eAAeA,YAAY;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}