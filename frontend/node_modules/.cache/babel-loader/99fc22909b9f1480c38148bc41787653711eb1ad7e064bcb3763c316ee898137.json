{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  // baseURL: 'https://api.weedhurry.com', // Production URL\n  baseURL: 'http://localhost:5001',\n  // Local development URL\n  withCredentials: true\n});\n\n// Interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Don't retry if it's a logout request or already retried\n  if (originalRequest.url === '/auth/logout' || originalRequest._retry) {\n    return Promise.reject(error);\n  }\n\n  // Handle 401 Unauthorized errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    originalRequest._retry = true;\n    try {\n      var _refreshResponse$data;\n      // Attempt to refresh the token\n      const refreshResponse = await axios.post('https://api.weedhurry.com/api/auth/refresh-token', {}, {\n        withCredentials: true // Use cookies instead of headers\n      });\n\n      // If refresh successful, retry the original request\n      if ((_refreshResponse$data = refreshResponse.data) !== null && _refreshResponse$data !== void 0 && _refreshResponse$data.success) {\n        return api(originalRequest);\n      } else {\n        // If refresh failed, clear auth and redirect\n        handleAuthFailure();\n      }\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n      handleAuthFailure();\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to handle authentication failures\nconst handleAuthFailure = () => {\n  const publicRoutes = ['/', '/nearby', '/login', '/register'];\n\n  // Clear cookies\n  document.cookie = 'accessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';\n  document.cookie = 'refreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';\n\n  // Clear any local storage\n  localStorage.removeItem('auth');\n\n  // Only redirect to login if not on a public route\n  if (!publicRoutes.includes(window.location.pathname)) {\n    window.location.href = '/login';\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","interceptors","response","use","error","_error$response","originalRequest","config","url","_retry","Promise","reject","status","_refreshResponse$data","refreshResponse","post","data","success","handleAuthFailure","refreshError","console","publicRoutes","document","cookie","localStorage","removeItem","includes","window","location","pathname","href"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    // baseURL: 'https://api.weedhurry.com', // Production URL\n    baseURL: 'http://localhost:5001',  // Local development URL\n    withCredentials: true,\n});\n\n// Interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n\n        // Don't retry if it's a logout request or already retried\n        if (originalRequest.url === '/auth/logout' || originalRequest._retry) {\n            return Promise.reject(error);\n        }\n\n        // Handle 401 Unauthorized errors\n        if (error.response?.status === 401) {\n            originalRequest._retry = true;\n            try {\n                // Attempt to refresh the token\n                const refreshResponse = await axios.post(\n                    'https://api.weedhurry.com/api/auth/refresh-token',\n                    {},\n                    {\n                        withCredentials: true // Use cookies instead of headers\n                    }\n                );\n\n                // If refresh successful, retry the original request\n                if (refreshResponse.data?.success) {\n                    return api(originalRequest);\n                } else {\n                    // If refresh failed, clear auth and redirect\n                    handleAuthFailure();\n                }\n            } catch (refreshError) {\n                console.error('Token refresh failed:', refreshError);\n                handleAuthFailure();\n            }\n        }\n\n        return Promise.reject(error);\n    }\n);\n\n// Helper function to handle authentication failures\nconst handleAuthFailure = () => {\n    const publicRoutes = ['/', '/nearby', '/login', '/register'];\n    \n    // Clear cookies\n    document.cookie = 'accessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';\n    document.cookie = 'refreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';\n    \n    // Clear any local storage\n    localStorage.removeItem('auth');\n\n    // Only redirect to login if not on a public route\n    if (!publicRoutes.includes(window.location.pathname)) {\n        window.location.href = '/login';\n    }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrB;EACAC,OAAO,EAAE,uBAAuB;EAAG;EACnCC,eAAe,EAAE;AACrB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CACxBD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACb,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAAM;;EAEpC;EACA,IAAID,eAAe,CAACE,GAAG,KAAK,cAAc,IAAIF,eAAe,CAACG,MAAM,EAAE;IAClE,OAAOC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;EAChC;;EAEA;EACA,IAAI,EAAAC,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBO,MAAM,MAAK,GAAG,EAAE;IAChCN,eAAe,CAACG,MAAM,GAAG,IAAI;IAC7B,IAAI;MAAA,IAAAI,qBAAA;MACA;MACA,MAAMC,eAAe,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CACpC,kDAAkD,EAClD,CAAC,CAAC,EACF;QACIf,eAAe,EAAE,IAAI,CAAC;MAC1B,CACJ,CAAC;;MAED;MACA,KAAAa,qBAAA,GAAIC,eAAe,CAACE,IAAI,cAAAH,qBAAA,eAApBA,qBAAA,CAAsBI,OAAO,EAAE;QAC/B,OAAOpB,GAAG,CAACS,eAAe,CAAC;MAC/B,CAAC,MAAM;QACH;QACAY,iBAAiB,CAAC,CAAC;MACvB;IACJ,CAAC,CAAC,OAAOC,YAAY,EAAE;MACnBC,OAAO,CAAChB,KAAK,CAAC,uBAAuB,EAAEe,YAAY,CAAC;MACpDD,iBAAiB,CAAC,CAAC;IACvB;EACJ;EAEA,OAAOR,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;EAC5B,MAAMG,YAAY,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC;;EAE5D;EACAC,QAAQ,CAACC,MAAM,GAAG,2GAA2G;EAC7HD,QAAQ,CAACC,MAAM,GAAG,4GAA4G;;EAE9H;EACAC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;;EAE/B;EACA,IAAI,CAACJ,YAAY,CAACK,QAAQ,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC,EAAE;IAClDF,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAG,QAAQ;EACnC;AACJ,CAAC;AAED,eAAejC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}