{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize auth state from localStorage\n  const [auth, setAuth] = useState(() => {\n    const storedAuth = JSON.parse(localStorage.getItem('auth'));\n    return storedAuth || null;\n  });\n  const [loading, setLoading] = useState(!auth);\n\n  // Function to check if a token is expired\n  const isTokenExpired = token => {\n    try {\n      const decoded = jwtDecode(token);\n      const now = Date.now() / 1000; // Current time in seconds\n      return decoded.exp < now; // Token is expired if the expiration time is less than now\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return true; // Treat token as expired if decoding fails\n    }\n  };\n\n  // Function to refresh the token\n  const refreshToken = async () => {\n    try {\n      const storedAuth = JSON.parse(localStorage.getItem('auth'));\n      const response = await axios.post('http://localhost:4000/api/auth/reset-token', {\n        vendorId: storedAuth.vendorId\n      });\n      const newToken = response.data.token;\n\n      // Update localStorage and auth state with the new token\n      const updatedAuth = {\n        token: newToken,\n        vendorId: storedAuth.vendorId\n      };\n      localStorage.setItem('auth', JSON.stringify(updatedAuth));\n      setAuth(updatedAuth);\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      logout(); // Log out if refreshing fails\n    }\n  };\n\n  // Function to log in the user\n  const login = authData => {\n    setAuth(authData); // Update auth state\n    localStorage.setItem('auth', JSON.stringify(authData)); // Save to localStorage\n  };\n\n  // Function to log out the user\n  const logout = () => {\n    setAuth(null);\n    localStorage.removeItem('auth');\n    window.location.href = '/login'; // Redirect to login page\n  };\n\n  // Check token validity on mount or auth change\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!(auth !== null && auth !== void 0 && auth.token)) {\n        setLoading(false);\n        return;\n      }\n\n      // Refresh the token if it's expired\n      if (isTokenExpired(auth.token)) {\n        await refreshToken();\n      }\n      try {\n        // Test token validity by making a simple authenticated request\n        await axios.get('http://localhost:5001/api/auth/validate', {\n          headers: {\n            Authorization: `Bearer ${auth.token}`\n          }\n        });\n        setLoading(false); // Token is valid, stop loading\n      } catch (error) {\n        console.error('Invalid token:', error);\n        logout(); // Log the user out if the token is invalid\n      }\n    };\n    verifyToken();\n  }, [auth]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      setAuth,\n      login,\n      logout,\n      loading\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 24\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook for accessing the AuthContext\n_s(AuthProvider, \"/r5L4H3Oj7WoXsVJ1XVF9FdUA2g=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","auth","setAuth","storedAuth","JSON","parse","localStorage","getItem","loading","setLoading","isTokenExpired","token","decoded","now","Date","exp","error","console","refreshToken","response","post","vendorId","newToken","data","updatedAuth","setItem","stringify","logout","login","authData","removeItem","window","location","href","verifyToken","get","headers","Authorization","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    // Initialize auth state from localStorage\n    const [auth, setAuth] = useState(() => {\n        const storedAuth = JSON.parse(localStorage.getItem('auth'));\n        return storedAuth || null;\n    });\n    const [loading, setLoading] = useState(!auth);\n\n    // Function to check if a token is expired\n    const isTokenExpired = (token) => {\n        try {\n            const decoded = jwtDecode(token);\n            const now = Date.now() / 1000; // Current time in seconds\n            return decoded.exp < now; // Token is expired if the expiration time is less than now\n        } catch (error) {\n            console.error('Error decoding token:', error);\n            return true; // Treat token as expired if decoding fails\n        }\n    };\n\n    // Function to refresh the token\n    const refreshToken = async () => {\n        try {\n            const storedAuth = JSON.parse(localStorage.getItem('auth'));\n            const response = await axios.post('http://localhost:4000/api/auth/reset-token', {\n                vendorId: storedAuth.vendorId,\n            });\n            const newToken = response.data.token;\n\n            // Update localStorage and auth state with the new token\n            const updatedAuth = { token: newToken, vendorId: storedAuth.vendorId };\n            localStorage.setItem('auth', JSON.stringify(updatedAuth));\n            setAuth(updatedAuth);\n        } catch (error) {\n            console.error('Error refreshing token:', error);\n            logout(); // Log out if refreshing fails\n        }\n    };\n\n    // Function to log in the user\n    const login = (authData) => {\n        setAuth(authData); // Update auth state\n        localStorage.setItem('auth', JSON.stringify(authData)); // Save to localStorage\n    };\n\n    // Function to log out the user\n    const logout = () => {\n        setAuth(null);\n        localStorage.removeItem('auth');\n        window.location.href = '/login'; // Redirect to login page\n    };\n\n    // Check token validity on mount or auth change\n    useEffect(() => {\n        const verifyToken = async () => {\n            if (!auth?.token) {\n                setLoading(false);\n                return;\n            }\n\n            // Refresh the token if it's expired\n            if (isTokenExpired(auth.token)) {\n                await refreshToken();\n            }\n\n            try {\n                // Test token validity by making a simple authenticated request\n                await axios.get('http://localhost:5001/api/auth/validate', {\n                    headers: { Authorization: `Bearer ${auth.token}` },\n                });\n                setLoading(false); // Token is valid, stop loading\n            } catch (error) {\n                console.error('Invalid token:', error);\n                logout(); // Log the user out if the token is invalid\n            }\n        };\n\n        verifyToken();\n    }, [auth]);\n\n    return (\n        <AuthContext.Provider value={{ auth, setAuth, login, logout, loading }}>\n            {loading ? <div>Loading...</div> : children}\n        </AuthContext.Provider>\n    );\n};\n\n// Custom hook for accessing the AuthContext\nexport const useAuth = () => {\n    return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}