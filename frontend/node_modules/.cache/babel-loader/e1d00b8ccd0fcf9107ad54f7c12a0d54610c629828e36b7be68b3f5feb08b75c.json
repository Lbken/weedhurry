{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cart, setCart] = useState([]);\n\n  // Load cart from local storage when the app loads\n  useEffect(() => {\n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      setCart(JSON.parse(storedCart));\n    }\n  }, []);\n\n  // Save cart to local storage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }, [cart]);\n  const addToCart = newItem => {\n    setCart(prevCart => {\n      const existingItem = prevCart.find(item => item.productId === newItem.productId);\n      if (existingItem) {\n        return prevCart.map(item => item.productId === newItem.productId ? {\n          ...item,\n          quantity: item.quantity + newItem.quantity\n        } : item);\n      } else {\n        return [...prevCart, {\n          ...newItem,\n          quantity: newItem.quantity\n        }];\n      }\n    });\n  };\n\n  // Remove product from the cart\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId) // Filter out the product with the matching ID\n    );\n  };\n\n  // Increment quantity of a specific item in the cart\n  const incrementItem = productId => {\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity: item.quantity + 1\n    } : item));\n  };\n\n  // Decrement quantity of a specific item in the cart\n  const decrementItem = productId => {\n    setCartItems(prevItems => prevItems.map(item => item.id === productId && item.quantity > 1 ? {\n      ...item,\n      quantity: item.quantity - 1\n    } : item));\n  };\n\n  // Update quantity of a specific item in the cart manually\n  const updateItemQuantity = (productId, newQuantity) => {\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity: newQuantity\n    } : item));\n  };\n\n  // Clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\n  };\n\n  // Get the total number of items in the cart (quantity, not unique items)\n  const getItemCount = () => {\n    return cartItems.reduce((acc, item) => acc + item.quantity, 0);\n  };\n\n  // Save cart items to localStorage\n  const saveCartToLocalStorage = () => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  };\n\n  // Load cart items from localStorage on initial load\n  const loadCartFromLocalStorage = () => {\n    const savedCartItems = JSON.parse(localStorage.getItem('cartItems'));\n    if (savedCartItems) {\n      setCartItems(savedCartItems);\n    }\n  };\n\n  // Automatically load the cart from localStorage when the component mounts\n  useEffect(() => {\n    loadCartFromLocalStorage();\n  }, []);\n\n  // Save cart to localStorage whenever the cartItems state changes\n  useEffect(() => {\n    saveCartToLocalStorage();\n  }, [cartItems]);\n\n  // Provide cart data and functions to the rest of the app\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    incrementItem,\n    // Exposed increment function\n    decrementItem,\n    // Exposed decrement function\n    updateItemQuantity,\n    clearCart,\n    calculateTotal,\n    getItemCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"vqcvMHR22CPmJ2yFjlu+VkW7qcw=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cart","setCart","storedCart","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","newItem","prevCart","existingItem","find","item","productId","map","quantity","removeFromCart","setCartItems","prevItems","filter","id","incrementItem","decrementItem","updateItemQuantity","newQuantity","clearCart","calculateTotal","cartItems","reduce","acc","price","getItemCount","saveCartToLocalStorage","loadCartFromLocalStorage","savedCartItems","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst CartContext = createContext();\n\nexport const useCart = () => useContext(CartContext);\n\nexport const CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n\n  // Load cart from local storage when the app loads\n  useEffect(() => {\n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      setCart(JSON.parse(storedCart));\n    }\n  }, []);\n\n  // Save cart to local storage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }, [cart]);\n\n  const addToCart = (newItem) => {\n    setCart((prevCart) => {\n      const existingItem = prevCart.find(item => item.productId === newItem.productId);\n      if (existingItem) {\n        return prevCart.map(item =>\n          item.productId === newItem.productId\n            ? { ...item, quantity: item.quantity + newItem.quantity }\n            : item\n        );\n      } else {\n        return [...prevCart, { ...newItem, quantity: newItem.quantity }];\n      }\n    });\n  };\n\n\n\n\n  // Remove product from the cart\n  const removeFromCart = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.filter(item => item.id !== productId) // Filter out the product with the matching ID\n    );\n  };\n\n  // Increment quantity of a specific item in the cart\n  const incrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item.id === productId ? { ...item, quantity: item.quantity + 1 } : item\n      )\n    );\n  };\n\n  // Decrement quantity of a specific item in the cart\n  const decrementItem = (productId) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item.id === productId && item.quantity > 1\n          ? { ...item, quantity: item.quantity - 1 }\n          : item\n      )\n    );\n  };\n\n  // Update quantity of a specific item in the cart manually\n  const updateItemQuantity = (productId, newQuantity) => {\n    setCartItems((prevItems) =>\n      prevItems.map(item =>\n        item.id === productId ? { ...item, quantity: newQuantity } : item\n      )\n    );\n  };\n\n  // Clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate total price of items in the cart\n  const calculateTotal = () => {\n    return cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\n  };\n\n  // Get the total number of items in the cart (quantity, not unique items)\n  const getItemCount = () => {\n    return cartItems.reduce((acc, item) => acc + item.quantity, 0);\n  };\n\n  // Save cart items to localStorage\n  const saveCartToLocalStorage = () => {\n    localStorage.setItem('cartItems', JSON.stringify(cartItems));\n  };\n\n  // Load cart items from localStorage on initial load\n  const loadCartFromLocalStorage = () => {\n    const savedCartItems = JSON.parse(localStorage.getItem('cartItems'));\n    if (savedCartItems) {\n      setCartItems(savedCartItems);\n    }\n  };\n\n  // Automatically load the cart from localStorage when the component mounts\n  useEffect(() => {\n    loadCartFromLocalStorage();\n  }, []);\n\n  // Save cart to localStorage whenever the cartItems state changes\n  useEffect(() => {\n    saveCartToLocalStorage();\n  }, [cartItems]);\n\n  // Provide cart data and functions to the rest of the app\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    incrementItem,    // Exposed increment function\n    decrementItem,    // Exposed decrement function\n    updateItemQuantity,\n    clearCart,\n    calculateTotal,\n    getItemCount,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}