{"ast":null,"code":"import axios from'axios';const api=axios.create({baseURL:'https://api.weedhurry.com',withCredentials:true});// Interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;// Don't retry if it's a logout request or already retried\nif(originalRequest.url==='/auth/logout'||originalRequest._retry){return Promise.reject(error);}// Handle 401 Unauthorized errors\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){originalRequest._retry=true;try{var _refreshResponse$data;// Attempt to refresh the token\nconst refreshResponse=await axios.post('https://api.weedhurry.com/api/auth/refresh-token',{},{withCredentials:true// Use cookies instead of headers\n});// If refresh successful, retry the original request\nif((_refreshResponse$data=refreshResponse.data)!==null&&_refreshResponse$data!==void 0&&_refreshResponse$data.success){return api(originalRequest);}else{// If refresh failed, clear auth and redirect\nhandleAuthFailure();}}catch(refreshError){console.error('Token refresh failed:',refreshError);handleAuthFailure();}}return Promise.reject(error);});// Helper function to handle authentication failures\nconst handleAuthFailure=()=>{// Clear cookies\ndocument.cookie='accessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';document.cookie='refreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';// Clear any local storage\nlocalStorage.removeItem('auth');// Redirect to login\nif(window.location.pathname!=='/login'){window.location.href='/login';}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","interceptors","response","use","error","_error$response","originalRequest","config","url","_retry","Promise","reject","status","_refreshResponse$data","refreshResponse","post","data","success","handleAuthFailure","refreshError","console","document","cookie","localStorage","removeItem","window","location","pathname","href"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://api.weedhurry.com',\n    withCredentials: true,\n});\n\n// Interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n\n        // Don't retry if it's a logout request or already retried\n        if (originalRequest.url === '/auth/logout' || originalRequest._retry) {\n            return Promise.reject(error);\n        }\n\n        // Handle 401 Unauthorized errors\n        if (error.response?.status === 401) {\n            originalRequest._retry = true;\n            try {\n                // Attempt to refresh the token\n                const refreshResponse = await axios.post(\n                    'https://api.weedhurry.com/api/auth/refresh-token',\n                    {},\n                    {\n                        withCredentials: true // Use cookies instead of headers\n                    }\n                );\n\n                // If refresh successful, retry the original request\n                if (refreshResponse.data?.success) {\n                    return api(originalRequest);\n                } else {\n                    // If refresh failed, clear auth and redirect\n                    handleAuthFailure();\n                }\n            } catch (refreshError) {\n                console.error('Token refresh failed:', refreshError);\n                handleAuthFailure();\n            }\n        }\n\n        return Promise.reject(error);\n    }\n);\n\n// Helper function to handle authentication failures\nconst handleAuthFailure = () => {\n    // Clear cookies\n    document.cookie = 'accessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';\n    document.cookie = 'refreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Domain=.weedhurry.com; Secure; SameSite=None';\n    \n    // Clear any local storage\n    localStorage.removeItem('auth');\n\n    // Redirect to login\n    if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n    }\n};\n\nexport default api;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACrBC,OAAO,CAAE,2BAA2B,CACpCC,eAAe,CAAE,IACrB,CAAC,CAAC,CAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CACxBD,QAAQ,EAAKA,QAAQ,CACtB,KAAO,CAAAE,KAAK,EAAK,KAAAC,eAAA,CACb,KAAM,CAAAC,eAAe,CAAGF,KAAK,CAACG,MAAM,CAEpC;AACA,GAAID,eAAe,CAACE,GAAG,GAAK,cAAc,EAAIF,eAAe,CAACG,MAAM,CAAE,CAClE,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC,CAChC,CAEA;AACA,GAAI,EAAAC,eAAA,CAAAD,KAAK,CAACF,QAAQ,UAAAG,eAAA,iBAAdA,eAAA,CAAgBO,MAAM,IAAK,GAAG,CAAE,CAChCN,eAAe,CAACG,MAAM,CAAG,IAAI,CAC7B,GAAI,KAAAI,qBAAA,CACA;AACA,KAAM,CAAAC,eAAe,CAAG,KAAM,CAAAlB,KAAK,CAACmB,IAAI,CACpC,kDAAkD,CAClD,CAAC,CAAC,CACF,CACIf,eAAe,CAAE,IAAK;AAC1B,CACJ,CAAC,CAED;AACA,IAAAa,qBAAA,CAAIC,eAAe,CAACE,IAAI,UAAAH,qBAAA,WAApBA,qBAAA,CAAsBI,OAAO,CAAE,CAC/B,MAAO,CAAApB,GAAG,CAACS,eAAe,CAAC,CAC/B,CAAC,IAAM,CACH;AACAY,iBAAiB,CAAC,CAAC,CACvB,CACJ,CAAE,MAAOC,YAAY,CAAE,CACnBC,OAAO,CAAChB,KAAK,CAAC,uBAAuB,CAAEe,YAAY,CAAC,CACpDD,iBAAiB,CAAC,CAAC,CACvB,CACJ,CAEA,MAAO,CAAAR,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC,CAChC,CACJ,CAAC,CAED;AACA,KAAM,CAAAc,iBAAiB,CAAGA,CAAA,GAAM,CAC5B;AACAG,QAAQ,CAACC,MAAM,CAAG,2GAA2G,CAC7HD,QAAQ,CAACC,MAAM,CAAG,4GAA4G,CAE9H;AACAC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC,CAE/B;AACA,GAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,QAAQ,CAAE,CACvCF,MAAM,CAACC,QAAQ,CAACE,IAAI,CAAG,QAAQ,CACnC,CACJ,CAAC,CAED,cAAe,CAAA/B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}