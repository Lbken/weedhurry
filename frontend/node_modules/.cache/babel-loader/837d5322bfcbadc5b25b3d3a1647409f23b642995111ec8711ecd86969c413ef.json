{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5001/api'\n});\n\n// Add an interceptor to attach the Authorization header with the token for every request\napi.interceptors.request.use(config => {\n  // Retrieve the token from localStorage\n  const token = localStorage.getItem('token');\n  if (token) {\n    // If a token exists, set it in the Authorization header\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // Handle errors in request setup\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5001/api',\n});\n\n// Add an interceptor to attach the Authorization header with the token for every request\napi.interceptors.request.use((config) => {\n  // Retrieve the token from localStorage\n  const token = localStorage.getItem('token');\n  if (token) {\n    // If a token exists, set it in the Authorization header\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, (error) => {\n  // Handle errors in request setup\n  return Promise.reject(error);\n});\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGM,KAAK,IAAK;EACZ;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}