{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/PickupMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PickupMap = ({\n  dispensaries,\n  onMarkerClick\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markers = useRef([]);\n\n  // Function to load Google Maps script dynamically\n  const loadGoogleMapsScript = () => {\n    return new Promise((resolve, reject) => {\n      const existingScript = document.getElementById('google-maps-script');\n      if (existingScript) {\n        existingScript.onload = resolve;\n        existingScript.onerror = reject;\n      } else {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places`;\n        script.id = 'google-maps-script';\n        script.async = true;\n        script.defer = true;\n        script.onload = resolve;\n        script.onerror = reject;\n        document.body.appendChild(script);\n      }\n    });\n  };\n\n  // Initialize map\n  const initializeMap = () => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API is not loaded.');\n      return;\n    }\n    if (mapRef.current && !mapInstance.current) {\n      mapInstance.current = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: 34.0522,\n          lng: -118.2437\n        },\n        // Default center (Los Angeles)\n        zoom: 12\n      });\n    }\n  };\n\n  // Add markers to the map\n  const addMarkers = () => {\n    if (!mapInstance.current || !dispensaries.length) return;\n\n    // Clear previous markers\n    markers.current.forEach(marker => marker.setMap(null));\n    markers.current = [];\n\n    // Add new markers\n    dispensaries.forEach(dispensary => {\n      var _dispensary$deliveryZ;\n      if (!((_dispensary$deliveryZ = dispensary.deliveryZone) !== null && _dispensary$deliveryZ !== void 0 && _dispensary$deliveryZ.coordinates)) return;\n      const [lng, lat] = dispensary.deliveryZone.coordinates;\n      const marker = new window.google.maps.Marker({\n        position: {\n          lat,\n          lng\n        },\n        map: mapInstance.current,\n        title: dispensary.dispensaryName\n      });\n      marker.addListener('click', () => {\n        if (onMarkerClick) onMarkerClick(dispensary); // Trigger parent callback\n      });\n      markers.current.push(marker);\n    });\n  };\n  useEffect(() => {\n    loadGoogleMapsScript().then(() => {\n      if (window.google && window.google.maps) {\n        initializeMap();\n      } else {\n        console.error('Google Maps JavaScript API is not loaded properly.');\n      }\n    }).catch(error => {\n      console.error('Error loading Google Maps script:', error);\n    });\n  }, []);\n  useEffect(() => {\n    if (mapInstance.current) {\n      addMarkers();\n    }\n  }, [dispensaries]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n_s(PickupMap, \"kqgeY0ahYgTSmq+ElqqKk5HFgSw=\");\n_c = PickupMap;\nexport default PickupMap;\nvar _c;\n$RefreshReg$(_c, \"PickupMap\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","PickupMap","dispensaries","onMarkerClick","_s","mapRef","mapInstance","markers","loadGoogleMapsScript","Promise","resolve","reject","existingScript","document","getElementById","onload","onerror","script","createElement","src","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","id","async","defer","body","appendChild","initializeMap","window","google","maps","console","error","current","Map","center","lat","lng","zoom","addMarkers","length","forEach","marker","setMap","dispensary","_dispensary$deliveryZ","deliveryZone","coordinates","Marker","position","map","title","dispensaryName","addListener","push","then","catch","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/PickupMap.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst PickupMap = ({ dispensaries, onMarkerClick }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markers = useRef([]);\n\n  // Function to load Google Maps script dynamically\n  const loadGoogleMapsScript = () => {\n    return new Promise((resolve, reject) => {\n      const existingScript = document.getElementById('google-maps-script');\n\n      if (existingScript) {\n        existingScript.onload = resolve;\n        existingScript.onerror = reject;\n      } else {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places`;\n        script.id = 'google-maps-script';\n        script.async = true;\n        script.defer = true;\n        script.onload = resolve;\n        script.onerror = reject;\n        document.body.appendChild(script);\n      }\n    });\n  };\n\n  // Initialize map\n  const initializeMap = () => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API is not loaded.');\n      return;\n    }\n\n    if (mapRef.current && !mapInstance.current) {\n      mapInstance.current = new window.google.maps.Map(mapRef.current, {\n        center: { lat: 34.0522, lng: -118.2437 }, // Default center (Los Angeles)\n        zoom: 12,\n      });\n    }\n  };\n\n  // Add markers to the map\n  const addMarkers = () => {\n    if (!mapInstance.current || !dispensaries.length) return;\n\n    // Clear previous markers\n    markers.current.forEach((marker) => marker.setMap(null));\n    markers.current = [];\n\n    // Add new markers\n    dispensaries.forEach((dispensary) => {\n      if (!dispensary.deliveryZone?.coordinates) return;\n\n      const [lng, lat] = dispensary.deliveryZone.coordinates;\n\n      const marker = new window.google.maps.Marker({\n        position: { lat, lng },\n        map: mapInstance.current,\n        title: dispensary.dispensaryName,\n      });\n\n      marker.addListener('click', () => {\n        if (onMarkerClick) onMarkerClick(dispensary); // Trigger parent callback\n      });\n\n      markers.current.push(marker);\n    });\n  };\n\n  useEffect(() => {\n    loadGoogleMapsScript()\n      .then(() => {\n        if (window.google && window.google.maps) {\n          initializeMap();\n        } else {\n          console.error('Google Maps JavaScript API is not loaded properly.');\n        }\n      })\n      .catch((error) => {\n        console.error('Error loading Google Maps script:', error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (mapInstance.current) {\n      addMarkers();\n    }\n  }, [dispensaries]);\n\n  return <div ref={mapRef} style={{ width: '100%', height: '500px' }}></div>;\n};\n\nexport default PickupMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}