{"ast":null,"code":"const jwt = require('jsonwebtoken');\nconst authMiddleware = (req, res, next) => {\n  try {\n    const token = req.cookies.token; // Get the token from cookies\n    if (!token) {\n      return res.status(401).json({\n        success: false,\n        message: 'Authentication token missing'\n      });\n    }\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.vendorId = decoded.id; // Attach vendor ID to the request\n    next(); // Proceed to the next middleware or route\n  } catch (error) {\n    console.error('Auth Middleware Error:', error.message);\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        success: false,\n        message: 'Token expired'\n      });\n    }\n    res.status(403).json({\n      success: false,\n      message: 'Invalid token'\n    });\n  }\n};\nmodule.exports = authMiddleware;","map":{"version":3,"names":["jwt","require","authMiddleware","req","res","next","token","cookies","status","json","success","message","decoded","verify","process","env","JWT_SECRET","vendorId","id","error","console","name","module","exports"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/TestDashboard.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\n\nconst authMiddleware = (req, res, next) => {\n    try {\n        const token = req.cookies.token; // Get the token from cookies\n        if (!token) {\n            return res.status(401).json({ success: false, message: 'Authentication token missing' });\n        }\n\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\n        req.vendorId = decoded.id; // Attach vendor ID to the request\n        next(); // Proceed to the next middleware or route\n    } catch (error) {\n        console.error('Auth Middleware Error:', error.message);\n        if (error.name === 'TokenExpiredError') {\n            return res.status(401).json({ success: false, message: 'Token expired' });\n        }\n        res.status(403).json({ success: false, message: 'Invalid token' });\n    }\n};\n\nmodule.exports = authMiddleware;\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEnC,MAAMC,cAAc,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACvC,IAAI;IACA,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAO,CAACD,KAAK,CAAC,CAAC;IACjC,IAAI,CAACA,KAAK,EAAE;MACR,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC5F;IAEA,MAAMC,OAAO,GAAGZ,GAAG,CAACa,MAAM,CAACP,KAAK,EAAEQ,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;IACzDb,GAAG,CAACc,QAAQ,GAAGL,OAAO,CAACM,EAAE,CAAC,CAAC;IAC3Bb,IAAI,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,OAAOc,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACR,OAAO,CAAC;IACtD,IAAIQ,KAAK,CAACE,IAAI,KAAK,mBAAmB,EAAE;MACpC,OAAOjB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAgB,CAAC,CAAC;IAC7E;IACAP,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAgB,CAAC,CAAC;EACtE;AACJ,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAGrB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}