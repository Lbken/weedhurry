{"ast":null,"code":"import axios from 'axios';\n\n// Environment-based configuration\nconst ENV = {\n  development: 'http://localhost:5001',\n  production: 'https://api.weedhurry.com'\n};\n\n// Get current environment\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst baseURL = isDevelopment ? ENV.development : ENV.production;\nconst api = axios.create({\n  baseURL,\n  withCredentials: true,\n  timeout: 10000 // Add timeout for better error handling\n});\n\n// Interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2;\n  const originalRequest = error.config;\n\n  // Don't retry if it's a logout request or already retried\n  if (originalRequest.url === '/auth/logout' || originalRequest._retry) {\n    return Promise.reject(error);\n  }\n\n  // Handle 401 Unauthorized errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    originalRequest._retry = true;\n    try {\n      var _refreshResponse$data;\n      // Use environment-based URL for refresh token\n      const refreshURL = `${baseURL}/api/auth/refresh-token`;\n      const refreshResponse = await axios.post(refreshURL, {}, {\n        withCredentials: true\n      });\n      if ((_refreshResponse$data = refreshResponse.data) !== null && _refreshResponse$data !== void 0 && _refreshResponse$data.success) {\n        return api(originalRequest);\n      } else {\n        handleAuthFailure();\n      }\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n      handleAuthFailure();\n      return Promise.reject(refreshError);\n    }\n  }\n\n  // Handle other common errors\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 503) {\n    console.error('Service temporarily unavailable');\n  }\n  return Promise.reject(error);\n});\n\n// Enhanced helper function to handle authentication failures\nconst handleAuthFailure = () => {\n  const publicRoutes = ['/', '/nearby', '/login', '/register'];\n\n  // Get the domain dynamically\n  const domain = isDevelopment ? 'localhost' : '.weedhurry.com';\n\n  // Clear cookies with environment-aware domain\n  const cookieOptions = `Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; ${!isDevelopment ? `Domain=${domain};` : ''} ${!isDevelopment ? 'Secure; SameSite=None' : ''}`;\n  document.cookie = `accessToken=; ${cookieOptions}`;\n  document.cookie = `refreshToken=; ${cookieOptions}`;\n\n  // Clear any local storage\n  localStorage.removeItem('auth');\n  sessionStorage.removeItem('auth'); // Also clear session storage\n\n  // Only redirect to login if not on a public route\n  if (!publicRoutes.includes(window.location.pathname)) {\n    window.location.href = '/login';\n  }\n};\n\n// Add request interceptor for common headers\napi.interceptors.request.use(config => {\n  // Add timestamp to prevent caching\n  config.params = {\n    ...config.params,\n    _t: Date.now()\n  };\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","ENV","development","production","isDevelopment","process","env","NODE_ENV","baseURL","api","create","withCredentials","timeout","interceptors","response","use","error","_error$response","_error$response2","originalRequest","config","url","_retry","Promise","reject","status","_refreshResponse$data","refreshURL","refreshResponse","post","data","success","handleAuthFailure","refreshError","console","publicRoutes","domain","cookieOptions","document","cookie","localStorage","removeItem","sessionStorage","includes","window","location","pathname","href","request","params","_t","Date","now"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Environment-based configuration\nconst ENV = {\n    development: 'http://localhost:5001',\n    production: 'https://api.weedhurry.com'\n};\n\n// Get current environment\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst baseURL = isDevelopment ? ENV.development : ENV.production;\n\nconst api = axios.create({\n    baseURL,\n    withCredentials: true,\n    timeout: 10000, // Add timeout for better error handling\n});\n\n// Interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n\n        // Don't retry if it's a logout request or already retried\n        if (originalRequest.url === '/auth/logout' || originalRequest._retry) {\n            return Promise.reject(error);\n        }\n\n        // Handle 401 Unauthorized errors\n        if (error.response?.status === 401) {\n            originalRequest._retry = true;\n            try {\n                // Use environment-based URL for refresh token\n                const refreshURL = `${baseURL}/api/auth/refresh-token`;\n                const refreshResponse = await axios.post(\n                    refreshURL,\n                    {},\n                    { withCredentials: true }\n                );\n\n                if (refreshResponse.data?.success) {\n                    return api(originalRequest);\n                } else {\n                    handleAuthFailure();\n                }\n            } catch (refreshError) {\n                console.error('Token refresh failed:', refreshError);\n                handleAuthFailure();\n                return Promise.reject(refreshError);\n            }\n        }\n\n        // Handle other common errors\n        if (error.response?.status === 503) {\n            console.error('Service temporarily unavailable');\n        }\n\n        return Promise.reject(error);\n    }\n);\n\n// Enhanced helper function to handle authentication failures\nconst handleAuthFailure = () => {\n    const publicRoutes = ['/', '/nearby', '/login', '/register'];\n    \n    // Get the domain dynamically\n    const domain = isDevelopment ? 'localhost' : '.weedhurry.com';\n    \n    // Clear cookies with environment-aware domain\n    const cookieOptions = `Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT; ${\n        !isDevelopment ? `Domain=${domain};` : ''\n    } ${!isDevelopment ? 'Secure; SameSite=None' : ''}`;\n    \n    document.cookie = `accessToken=; ${cookieOptions}`;\n    document.cookie = `refreshToken=; ${cookieOptions}`;\n    \n    // Clear any local storage\n    localStorage.removeItem('auth');\n    sessionStorage.removeItem('auth'); // Also clear session storage\n\n    // Only redirect to login if not on a public route\n    if (!publicRoutes.includes(window.location.pathname)) {\n        window.location.href = '/login';\n    }\n};\n\n// Add request interceptor for common headers\napi.interceptors.request.use(\n    (config) => {\n        // Add timestamp to prevent caching\n        config.params = {\n            ...config.params,\n            _t: Date.now()\n        };\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}