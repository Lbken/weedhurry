{"ast":null,"code":"import React,{useState}from'react';import{useParams,useNavigate}from'react-router-dom';import{Form,Button,Alert,Container,Card}from'react-bootstrap';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ResetPassword=()=>{const{token}=useParams();// Extract token from URL\nconst[password,setPassword]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const[error,setError]=useState('');const[success,setSuccess]=useState('');const[loading,setLoading]=useState(false);const navigate=useNavigate();const handleSubmit=async e=>{e.preventDefault();setError('');setSuccess('');setLoading(true);if(password!==confirmPassword){setError('Passwords do not match.');setLoading(false);return;}try{var _response$data;const response=await axios.post('http://localhost:5001/api/auth/reset-password',{token,password});if((_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.success){setSuccess('Password reset successfully. Redirecting to login...');setTimeout(()=>{navigate('/login');// Redirect to login page\n},3000);}}catch(err){console.error('Error resetting password:',err);setError('Failed to reset password. The link may have expired or is invalid.');}finally{setLoading(false);}};return/*#__PURE__*/_jsx(Container,{className:\"mt-5 d-flex justify-content-center\",children:/*#__PURE__*/_jsx(Card,{style:{maxWidth:'400px'},className:\"shadow p-4\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-center mb-4\",children:\"Reset Your Password\"}),error&&/*#__PURE__*/_jsx(Alert,{variant:\"danger\",children:error}),success&&/*#__PURE__*/_jsx(Alert,{variant:\"success\",children:success}),/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(Form.Group,{controlId:\"password\",className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"New Password\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",placeholder:\"Enter new password\",value:password,onChange:e=>setPassword(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(Form.Group,{controlId:\"confirmPassword\",className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Confirm New Password\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",placeholder:\"Confirm new password\",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value),required:true})]}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",className:\"w-100\",disabled:loading,children:loading?'Resetting Password...':'Reset Password'})]})]})})});};export default ResetPassword;","map":{"version":3,"names":["React","useState","useParams","useNavigate","Form","Button","Alert","Container","Card","axios","jsx","_jsx","jsxs","_jsxs","ResetPassword","token","password","setPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","loading","setLoading","navigate","handleSubmit","e","preventDefault","_response$data","response","post","data","setTimeout","err","console","className","children","style","maxWidth","Body","variant","onSubmit","Group","controlId","Label","Control","type","placeholder","value","onChange","target","required","disabled"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Form, Button, Alert, Container, Card } from 'react-bootstrap';\nimport axios from 'axios';\n\nconst ResetPassword = () => {\n    const { token } = useParams(); // Extract token from URL\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [loading, setLoading] = useState(false);\n    const navigate = useNavigate();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setError('');\n        setSuccess('');\n        setLoading(true);\n\n        if (password !== confirmPassword) {\n            setError('Passwords do not match.');\n            setLoading(false);\n            return;\n        }\n\n        try {\n            const response = await axios.post('http://localhost:5001/api/auth/reset-password', {\n                token,\n                password,\n            });\n\n            if (response.data?.success) {\n                setSuccess('Password reset successfully. Redirecting to login...');\n                setTimeout(() => {\n                    navigate('/login'); // Redirect to login page\n                }, 3000);\n            }\n        } catch (err) {\n            console.error('Error resetting password:', err);\n            setError('Failed to reset password. The link may have expired or is invalid.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Container className=\"mt-5 d-flex justify-content-center\">\n            <Card style={{ maxWidth: '400px' }} className=\"shadow p-4\">\n                <Card.Body>\n                    <h3 className=\"text-center mb-4\">Reset Your Password</h3>\n                    {error && <Alert variant=\"danger\">{error}</Alert>}\n                    {success && <Alert variant=\"success\">{success}</Alert>}\n                    <Form onSubmit={handleSubmit}>\n                        <Form.Group controlId=\"password\" className=\"mb-3\">\n                            <Form.Label>New Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Enter new password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"confirmPassword\" className=\"mb-3\">\n                            <Form.Label>Confirm New Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Confirm new password\"\n                                value={confirmPassword}\n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                                required\n                            />\n                        </Form.Group>\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            className=\"w-100\"\n                            disabled={loading}\n                        >\n                            {loading ? 'Resetting Password...' : 'Reset Password'}\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </Container>\n    );\n};\n\nexport default ResetPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}