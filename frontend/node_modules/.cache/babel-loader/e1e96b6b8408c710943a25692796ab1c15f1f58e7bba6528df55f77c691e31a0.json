{"ast":null,"code":"import React,{useEffect,useRef,useCallback}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const PickupMap=_ref=>{let{dispensaries,onMarkerClick}=_ref;const mapRef=useRef(null);const mapInstance=useRef(null);const markers=useRef([]);// Function to load Google Maps script dynamically\nconst loadGoogleMapsScript=()=>{return new Promise((resolve,reject)=>{if(window.google&&window.google.maps){// Google Maps already loaded\nresolve();}else{const existingScript=document.getElementById('google-maps-script');if(existingScript){existingScript.onload=resolve;existingScript.onerror=reject;}else{const script=document.createElement('script');script.src=`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places`;script.id='google-maps-script';script.async=true;script.defer=true;script.onload=resolve;script.onerror=reject;document.body.appendChild(script);}}});};// Initialize map\nconst initializeMap=()=>{if(!mapRef.current||!window.google||!window.google.maps)return;if(!mapInstance.current){mapInstance.current=new window.google.maps.Map(mapRef.current,{center:{lat:34.0522,lng:-118.2437},// Default center (Los Angeles)\nzoom:12});console.log('Map initialized.');}};// Add markers to the map\nconst addMarkers=useCallback(()=>{if(!mapInstance.current||!(dispensaries!==null&&dispensaries!==void 0&&dispensaries.length)){console.warn('No dispensaries or map instance available to add markers.');return;}// Clear previous markers\nmarkers.current.forEach(marker=>marker.setMap(null));markers.current=[];// Create bounds object to fit all markers\nconst bounds=new window.google.maps.LatLngBounds();dispensaries.forEach(dispensary=>{if(!dispensary.coordinates||dispensary.coordinates.length!==2){console.warn(`Invalid coordinates for ${dispensary.dispensaryName}`);return;}const[lng,lat]=dispensary.coordinates;const position={lat,lng};const marker=new window.google.maps.Marker({position,map:mapInstance.current,title:dispensary.dispensaryName});bounds.extend(position);marker.addListener('click',()=>onMarkerClick===null||onMarkerClick===void 0?void 0:onMarkerClick(dispensary));markers.current.push(marker);});// Fit map to show all markers\nif(markers.current.length>0){mapInstance.current.fitBounds(bounds);}},[dispensaries,onMarkerClick]);useEffect(()=>{loadGoogleMapsScript().then(()=>{console.log('Google Maps script loaded successfully.');initializeMap();addMarkers();}).catch(error=>{console.error('Error loading Google Maps script:',error);});},[addMarkers]);return/*#__PURE__*/_jsx(\"div\",{ref:mapRef,style:{width:'100%',height:'100%'}});};export default PickupMap;","map":{"version":3,"names":["React","useEffect","useRef","useCallback","jsx","_jsx","PickupMap","_ref","dispensaries","onMarkerClick","mapRef","mapInstance","markers","loadGoogleMapsScript","Promise","resolve","reject","window","google","maps","existingScript","document","getElementById","onload","onerror","script","createElement","src","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","id","async","defer","body","appendChild","initializeMap","current","Map","center","lat","lng","zoom","console","log","addMarkers","length","warn","forEach","marker","setMap","bounds","LatLngBounds","dispensary","coordinates","dispensaryName","position","Marker","map","title","extend","addListener","push","fitBounds","then","catch","error","ref","style","width","height"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/PickupMap.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\n\nconst PickupMap = ({ dispensaries, onMarkerClick }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const markers = useRef([]);\n\n  // Function to load Google Maps script dynamically\n  const loadGoogleMapsScript = () => {\n    return new Promise((resolve, reject) => {\n      if (window.google && window.google.maps) {\n        // Google Maps already loaded\n        resolve();\n      } else {\n        const existingScript = document.getElementById('google-maps-script');\n        if (existingScript) {\n          existingScript.onload = resolve;\n          existingScript.onerror = reject;\n        } else {\n          const script = document.createElement('script');\n          script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places`;\n          script.id = 'google-maps-script';\n          script.async = true;\n          script.defer = true;\n          script.onload = resolve;\n          script.onerror = reject;\n          document.body.appendChild(script);\n        }\n      }\n    });\n  };\n\n  // Initialize map\n  const initializeMap = () => {\n    if (!mapRef.current || !window.google || !window.google.maps) return;\n\n    if (!mapInstance.current) {\n      mapInstance.current = new window.google.maps.Map(mapRef.current, {\n        center: { lat: 34.0522, lng: -118.2437 }, // Default center (Los Angeles)\n        zoom: 12,\n      });\n      console.log('Map initialized.');\n    }\n  };\n\n  // Add markers to the map\nconst addMarkers = useCallback(() => {\n  if (!mapInstance.current || !dispensaries?.length) {\n    console.warn('No dispensaries or map instance available to add markers.');\n    return;\n  }\n\n  // Clear previous markers\n  markers.current.forEach((marker) => marker.setMap(null));\n  markers.current = [];\n\n  // Create bounds object to fit all markers\n  const bounds = new window.google.maps.LatLngBounds();\n\n  dispensaries.forEach((dispensary) => {\n    if (!dispensary.coordinates || dispensary.coordinates.length !== 2) {\n      console.warn(`Invalid coordinates for ${dispensary.dispensaryName}`);\n      return;\n    }\n\n    const [lng, lat] = dispensary.coordinates;\n    const position = { lat, lng };\n\n    const marker = new window.google.maps.Marker({\n      position,\n      map: mapInstance.current,\n      title: dispensary.dispensaryName\n    });\n\n    bounds.extend(position);\n    marker.addListener('click', () => onMarkerClick?.(dispensary));\n    markers.current.push(marker);\n  });\n\n  // Fit map to show all markers\n  if (markers.current.length > 0) {\n    mapInstance.current.fitBounds(bounds);\n  }\n}, [dispensaries, onMarkerClick]);\n\n  useEffect(() => {\n    loadGoogleMapsScript()\n      .then(() => {\n        console.log('Google Maps script loaded successfully.');\n        initializeMap();\n        addMarkers();\n      })\n      .catch((error) => {\n        console.error('Error loading Google Maps script:', error);\n      });\n  }, [addMarkers]);\n\n  return <div ref={mapRef} style={{ width: '100%', height: '100%' }}></div>;\n};\n\nexport default PickupMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}