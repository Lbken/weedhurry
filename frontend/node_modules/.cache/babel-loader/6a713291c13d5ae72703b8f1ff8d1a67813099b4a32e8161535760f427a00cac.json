{"ast":null,"code":"// vendorUtils.js\nexport const extractCoordinates = vendor => {\n  var _vendor$storefrontAdd, _vendor$deliveryZone;\n  // Try storefront first for Pickup & Pickup/Delivery vendors\n  if (['Pickup', 'Pickup & Delivery'].includes(vendor.dispensaryType) && (_vendor$storefrontAdd = vendor.storefrontAddress) !== null && _vendor$storefrontAdd !== void 0 && _vendor$storefrontAdd.coordinates) {\n    const coords = vendor.storefrontAddress.coordinates.map(coord => typeof coord === 'object' ? parseFloat(coord.$numberDouble || coord.$numberInt) : parseFloat(coord));\n    if (isValidCoordinates(coords)) {\n      return {\n        coordinates: coords,\n        source: 'storefront'\n      };\n    }\n  }\n\n  // Try delivery zone for Delivery & Pickup/Delivery vendors\n  if (['Delivery', 'Pickup & Delivery'].includes(vendor.dispensaryType) && (_vendor$deliveryZone = vendor.deliveryZone) !== null && _vendor$deliveryZone !== void 0 && _vendor$deliveryZone.coordinates) {\n    const coords = vendor.deliveryZone.coordinates.map(coord => typeof coord === 'object' ? parseFloat(coord.$numberDouble || coord.$numberInt) : parseFloat(coord));\n    if (isValidCoordinates(coords)) {\n      return {\n        coordinates: coords,\n        source: 'delivery'\n      };\n    }\n  }\n  return null;\n};\nexport const isValidCoordinates = coords => {\n  return Array.isArray(coords) && coords.length === 2 && !coords.some(isNaN) && coords[0] >= -180 && coords[0] <= 180 && coords[1] >= -90 && coords[1] <= 90;\n};\nexport const calculateDistance = (lat1, lng1, lat2, lng2) => {\n  const toRadians = degree => degree * Math.PI / 180;\n  const R = 3963; // Earth's radius in miles\n  const dLat = toRadians(lat2 - lat1);\n  const dLng = toRadians(lng2 - lng1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return parseFloat((R * c).toFixed(1));\n};\nexport const enrichVendorWithDistance = (vendor, userLat, userLng) => {\n  const coordInfo = extractCoordinates(vendor);\n  if (!coordInfo) return null;\n  const [vLng, vLat] = coordInfo.coordinates;\n  return {\n    ...vendor,\n    coordinates: coordInfo.coordinates,\n    coordinateSource: coordInfo.source,\n    milesAway: calculateDistance(userLat, userLng, vLat, vLng)\n  };\n};","map":{"version":3,"names":["extractCoordinates","vendor","_vendor$storefrontAdd","_vendor$deliveryZone","includes","dispensaryType","storefrontAddress","coordinates","coords","map","coord","parseFloat","$numberDouble","$numberInt","isValidCoordinates","source","deliveryZone","Array","isArray","length","some","isNaN","calculateDistance","lat1","lng1","lat2","lng2","toRadians","degree","Math","PI","R","dLat","dLng","a","sin","cos","c","atan2","sqrt","toFixed","enrichVendorWithDistance","userLat","userLng","coordInfo","vLng","vLat","coordinateSource","milesAway"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/hooks/useVendors.js"],"sourcesContent":["// vendorUtils.js\nexport const extractCoordinates = (vendor) => {\n    // Try storefront first for Pickup & Pickup/Delivery vendors\n    if (['Pickup', 'Pickup & Delivery'].includes(vendor.dispensaryType) && \n        vendor.storefrontAddress?.coordinates) {\n      const coords = vendor.storefrontAddress.coordinates.map(coord => \n        typeof coord === 'object' ? parseFloat(coord.$numberDouble || coord.$numberInt) : parseFloat(coord)\n      );\n      if (isValidCoordinates(coords)) {\n        return { coordinates: coords, source: 'storefront' };\n      }\n    }\n  \n    // Try delivery zone for Delivery & Pickup/Delivery vendors\n    if (['Delivery', 'Pickup & Delivery'].includes(vendor.dispensaryType) && \n        vendor.deliveryZone?.coordinates) {\n      const coords = vendor.deliveryZone.coordinates.map(coord =>\n        typeof coord === 'object' ? parseFloat(coord.$numberDouble || coord.$numberInt) : parseFloat(coord)\n      );\n      if (isValidCoordinates(coords)) {\n        return { coordinates: coords, source: 'delivery' };\n      }\n    }\n  \n    return null;\n  };\n  \n  export const isValidCoordinates = (coords) => {\n    return Array.isArray(coords) && \n           coords.length === 2 && \n           !coords.some(isNaN) &&\n           coords[0] >= -180 && coords[0] <= 180 && \n           coords[1] >= -90 && coords[1] <= 90;\n  };\n  \n  export const calculateDistance = (lat1, lng1, lat2, lng2) => {\n    const toRadians = (degree) => (degree * Math.PI) / 180;\n    const R = 3963; // Earth's radius in miles\n    const dLat = toRadians(lat2 - lat1);\n    const dLng = toRadians(lng2 - lng1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return parseFloat((R * c).toFixed(1));\n  };\n  \n  export const enrichVendorWithDistance = (vendor, userLat, userLng) => {\n    const coordInfo = extractCoordinates(vendor);\n    if (!coordInfo) return null;\n  \n    const [vLng, vLat] = coordInfo.coordinates;\n    return {\n      ...vendor,\n      coordinates: coordInfo.coordinates,\n      coordinateSource: coordInfo.source,\n      milesAway: calculateDistance(userLat, userLng, vLat, vLng)\n    };\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}