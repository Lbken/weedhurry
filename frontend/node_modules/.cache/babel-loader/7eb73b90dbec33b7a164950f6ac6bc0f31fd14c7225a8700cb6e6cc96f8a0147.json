{"ast":null,"code":"// src/utils/googleMapsLoader.js\n\nlet loadingPromise = null;\nconst LIBRARIES = ['places', 'geometry']; // Add any required libraries here\n\nexport const loadGoogleMapsScript = () => {\n  if (loadingPromise) {\n    return loadingPromise;\n  }\n  loadingPromise = new Promise((resolve, reject) => {\n    try {\n      var _window$google;\n      // If script is already loaded, resolve immediately\n      if ((_window$google = window.google) !== null && _window$google !== void 0 && _window$google.maps) {\n        console.log('Google Maps already loaded');\n        resolve(window.google.maps);\n        return;\n      }\n\n      // Create callback function\n      const callbackName = 'googleMapsCallback';\n      window[callbackName] = () => {\n        console.log('Google Maps loaded successfully');\n        resolve(window.google.maps);\n        delete window[callbackName];\n      };\n\n      // Create script element\n      const script = document.createElement('script');\n      const libraries = LIBRARIES.join(',');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=${libraries}&callback=${callbackName}`;\n      script.async = true;\n      script.defer = true;\n\n      // Setup error handler\n      script.onerror = () => {\n        console.error('Failed to load Google Maps SDK');\n        loadingPromise = null; // Reset promise so it can be tried again\n        reject(new Error('Failed to load Google Maps SDK'));\n      };\n\n      // Add script to document\n      document.head.appendChild(script);\n      console.log('Google Maps script added to DOM');\n    } catch (error) {\n      console.error('Error in Google Maps loader:', error);\n      loadingPromise = null;\n      reject(error);\n    }\n  });\n  return loadingPromise;\n};\n\n// Add a helper to check if maps is loaded\nexport const isGoogleMapsLoaded = () => {\n  var _window$google2;\n  return !!((_window$google2 = window.google) !== null && _window$google2 !== void 0 && _window$google2.maps);\n};\n\n// Add a helper to get geocoder instance\nexport const getGeocoder = async () => {\n  const maps = await loadGoogleMapsScript();\n  return new maps.Geocoder();\n};\n\n// Helper for geocoding addresses\nexport const geocodeAddress = async address => {\n  try {\n    const geocoder = await getGeocoder();\n    const response = await new Promise((resolve, reject) => {\n      geocoder.geocode({\n        address\n      }, (results, status) => {\n        if (status === 'OK') {\n          resolve(results);\n        } else {\n          reject(new Error(`Geocoding failed: ${status}`));\n        }\n      });\n    });\n    if (response[0]) {\n      const {\n        lat,\n        lng\n      } = response[0].geometry.location;\n      return {\n        lat: lat(),\n        lng: lng(),\n        formatted_address: response[0].formatted_address\n      };\n    }\n    throw new Error('No results found');\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["loadingPromise","LIBRARIES","loadGoogleMapsScript","Promise","resolve","reject","_window$google","window","google","maps","console","log","callbackName","script","document","createElement","libraries","join","src","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","async","defer","onerror","error","Error","head","appendChild","isGoogleMapsLoaded","_window$google2","getGeocoder","Geocoder","geocodeAddress","address","geocoder","response","geocode","results","status","lat","lng","geometry","location","formatted_address"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/utils/googleMapsLoader.js"],"sourcesContent":["// src/utils/googleMapsLoader.js\n\nlet loadingPromise = null;\nconst LIBRARIES = ['places', 'geometry']; // Add any required libraries here\n\nexport const loadGoogleMapsScript = () => {\n  if (loadingPromise) {\n    return loadingPromise;\n  }\n\n  loadingPromise = new Promise((resolve, reject) => {\n    try {\n      // If script is already loaded, resolve immediately\n      if (window.google?.maps) {\n        console.log('Google Maps already loaded');\n        resolve(window.google.maps);\n        return;\n      }\n\n      // Create callback function\n      const callbackName = 'googleMapsCallback';\n      window[callbackName] = () => {\n        console.log('Google Maps loaded successfully');\n        resolve(window.google.maps);\n        delete window[callbackName];\n      };\n\n      // Create script element\n      const script = document.createElement('script');\n      const libraries = LIBRARIES.join(',');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=${libraries}&callback=${callbackName}`;\n      script.async = true;\n      script.defer = true;\n\n      // Setup error handler\n      script.onerror = () => {\n        console.error('Failed to load Google Maps SDK');\n        loadingPromise = null; // Reset promise so it can be tried again\n        reject(new Error('Failed to load Google Maps SDK'));\n      };\n\n      // Add script to document\n      document.head.appendChild(script);\n      console.log('Google Maps script added to DOM');\n    } catch (error) {\n      console.error('Error in Google Maps loader:', error);\n      loadingPromise = null;\n      reject(error);\n    }\n  });\n\n  return loadingPromise;\n};\n\n// Add a helper to check if maps is loaded\nexport const isGoogleMapsLoaded = () => {\n  return !!window.google?.maps;\n};\n\n// Add a helper to get geocoder instance\nexport const getGeocoder = async () => {\n  const maps = await loadGoogleMapsScript();\n  return new maps.Geocoder();\n};\n\n// Helper for geocoding addresses\nexport const geocodeAddress = async (address) => {\n  try {\n    const geocoder = await getGeocoder();\n    const response = await new Promise((resolve, reject) => {\n      geocoder.geocode({ address }, (results, status) => {\n        if (status === 'OK') {\n          resolve(results);\n        } else {\n          reject(new Error(`Geocoding failed: ${status}`));\n        }\n      });\n    });\n    \n    if (response[0]) {\n      const { lat, lng } = response[0].geometry.location;\n      return {\n        lat: lat(),\n        lng: lng(),\n        formatted_address: response[0].formatted_address\n      };\n    }\n    throw new Error('No results found');\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}