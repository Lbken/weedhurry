{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/StoreNoticeComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StoreNoticeComponent = ({\n  initialNotice = '',\n  onUpdate\n}) => {\n  _s();\n  const [storeNotice, setStoreNotice] = useState('');\n  const [charCount, setCharCount] = useState(0);\n  const [feedback, setFeedback] = useState({\n    message: '',\n    variant: ''\n  }); // Handle both success and error messages\n\n  // Update state when initialNotice changes\n  useEffect(() => {\n    setStoreNotice(initialNotice);\n    setCharCount(initialNotice.length);\n  }, [initialNotice]);\n  const handleChange = e => {\n    const text = e.target.value;\n    if (text.length <= 150) {\n      setStoreNotice(text);\n      setCharCount(text.length);\n      setFeedback({\n        message: '',\n        variant: ''\n      }); // Clear feedback when typing within limits\n    } else {\n      setFeedback({\n        message: 'Notice cannot exceed 150 characters.',\n        variant: 'danger'\n      });\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (storeNotice.length > 150) {\n      setFeedback({\n        message: 'Notice cannot exceed 150 characters.',\n        variant: 'danger'\n      });\n      return;\n    }\n    try {\n      await onUpdate(storeNotice); // Assuming onUpdate is an async function\n      setFeedback({\n        message: 'Store notice updated successfully!',\n        variant: 'success'\n      });\n    } catch (error) {\n      console.error('Error updating store notice:', error);\n      setFeedback({\n        message: 'Failed to update store notice. Please try again.',\n        variant: 'danger'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    className: \"p-4 border rounded shadow-sm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"mb-3\",\n      children: \"Store Notice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), feedback.message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mb-3 text-${feedback.variant}`,\n      children: feedback.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"storeNotice\",\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"textarea\",\n        rows: 3,\n        placeholder: \"Enter your store notice (max 150 characters)\",\n        value: storeNotice,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n        className: \"text-muted\",\n        children: [charCount, \" / 150 characters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        className: \"mt-2 px-4 py-2\",\n        children: \"Update Notice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(StoreNoticeComponent, \"a84jMXHrgYypRC9EPZQ0oiB5HLU=\");\n_c = StoreNoticeComponent;\nexport default StoreNoticeComponent;\nvar _c;\n$RefreshReg$(_c, \"StoreNoticeComponent\");","map":{"version":3,"names":["React","useState","useEffect","Form","Button","jsxDEV","_jsxDEV","StoreNoticeComponent","initialNotice","onUpdate","_s","storeNotice","setStoreNotice","charCount","setCharCount","feedback","setFeedback","message","variant","length","handleChange","e","text","target","value","handleSubmit","preventDefault","error","console","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","controlId","Control","as","rows","placeholder","onChange","Text","type","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/weedhurry-platform/v1/frontend/src/components/StoreNoticeComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nconst StoreNoticeComponent = ({ initialNotice = '', onUpdate }) => {\n  const [storeNotice, setStoreNotice] = useState('');\n  const [charCount, setCharCount] = useState(0);\n  const [feedback, setFeedback] = useState({ message: '', variant: '' }); // Handle both success and error messages\n\n  // Update state when initialNotice changes\n  useEffect(() => {\n    setStoreNotice(initialNotice);\n    setCharCount(initialNotice.length);\n  }, [initialNotice]);\n\n  const handleChange = (e) => {\n    const text = e.target.value;\n    if (text.length <= 150) {\n      setStoreNotice(text);\n      setCharCount(text.length);\n      setFeedback({ message: '', variant: '' }); // Clear feedback when typing within limits\n    } else {\n      setFeedback({ message: 'Notice cannot exceed 150 characters.', variant: 'danger' });\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (storeNotice.length > 150) {\n      setFeedback({ message: 'Notice cannot exceed 150 characters.', variant: 'danger' });\n      return;\n    }\n\n    try {\n      await onUpdate(storeNotice); // Assuming onUpdate is an async function\n      setFeedback({ message: 'Store notice updated successfully!', variant: 'success' });\n    } catch (error) {\n      console.error('Error updating store notice:', error);\n      setFeedback({ message: 'Failed to update store notice. Please try again.', variant: 'danger' });\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} className=\"p-4 border rounded shadow-sm\">\n      <h5 className=\"mb-3\">Store Notice</h5>\n      {feedback.message && (\n        <div className={`mb-3 text-${feedback.variant}`}>\n          {feedback.message}\n        </div>\n      )}\n      <Form.Group controlId=\"storeNotice\" className=\"mb-3\">\n        <Form.Control\n          as=\"textarea\"\n          rows={3}\n          placeholder=\"Enter your store notice (max 150 characters)\"\n          value={storeNotice}\n          onChange={handleChange}\n        />\n        <Form.Text className=\"text-muted\">\n          {charCount} / 150 characters\n        </Form.Text>\n      </Form.Group>\n      <div className=\"d-flex justify-content-center\">\n        <Button variant=\"primary\" type=\"submit\" className=\"mt-2 px-4 py-2\">\n          Update Notice\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default StoreNoticeComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}